
AUTO_DOOR_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  00800060  00004114  000041a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001c4  008001c4  0000430c  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  0000430c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f15  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000080f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  000082b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  000084c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000ab4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000c02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000d7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <main>
      8a:	0c 94 88 20 	jmp	0x4110	; 0x4110 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ea       	ldi	r26, 0xAB	; 171
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ea       	ldi	r24, 0xAB	; 171
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ea       	ldi	r22, 0xAB	; 171
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ed 54       	subi	r30, 0x4D	; 77
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "util/delay.h"


void CLCD_voidSendCommand(u8 CLCD_u8Command)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	e9 97       	sbiw	r28, 0x39	; 57
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	89 af       	std	Y+57, r24	; 0x39
	// RW low
	//DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
	// RS low
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	63 e0       	ldi	r22, 0x03	; 3
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	// EN high
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>

#if	(LCD_MODE	==	LCD_4BIT)
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Command,4)));
     eb8:	89 ad       	ldd	r24, Y+57	; 0x39
     eba:	82 95       	swap	r24
     ebc:	8f 70       	andi	r24, 0x0F	; 15
     ebe:	98 2f       	mov	r25, r24
     ec0:	91 70       	andi	r25, 0x01	; 1
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	49 2f       	mov	r20, r25
     ec8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Command,5)));
     ecc:	89 ad       	ldd	r24, Y+57	; 0x39
     ece:	82 95       	swap	r24
     ed0:	86 95       	lsr	r24
     ed2:	87 70       	andi	r24, 0x07	; 7
     ed4:	98 2f       	mov	r25, r24
     ed6:	91 70       	andi	r25, 0x01	; 1
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	49 2f       	mov	r20, r25
     ede:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Command,6)));
     ee2:	89 ad       	ldd	r24, Y+57	; 0x39
     ee4:	82 95       	swap	r24
     ee6:	86 95       	lsr	r24
     ee8:	86 95       	lsr	r24
     eea:	83 70       	andi	r24, 0x03	; 3
     eec:	98 2f       	mov	r25, r24
     eee:	91 70       	andi	r25, 0x01	; 1
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	62 e0       	ldi	r22, 0x02	; 2
     ef4:	49 2f       	mov	r20, r25
     ef6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Command,7)));
     efa:	89 ad       	ldd	r24, Y+57	; 0x39
     efc:	98 2f       	mov	r25, r24
     efe:	99 1f       	adc	r25, r25
     f00:	99 27       	eor	r25, r25
     f02:	99 1f       	adc	r25, r25
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	64 e0       	ldi	r22, 0x04	; 4
     f08:	49 2f       	mov	r20, r25
     f0a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	62 e0       	ldi	r22, 0x02	; 2
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e8       	ldi	r26, 0x80	; 128
     f1e:	bf e3       	ldi	r27, 0x3F	; 63
     f20:	8d ab       	std	Y+53, r24	; 0x35
     f22:	9e ab       	std	Y+54, r25	; 0x36
     f24:	af ab       	std	Y+55, r26	; 0x37
     f26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6d a9       	ldd	r22, Y+53	; 0x35
     f2a:	7e a9       	ldd	r23, Y+54	; 0x36
     f2c:	8f a9       	ldd	r24, Y+55	; 0x37
     f2e:	98 ad       	ldd	r25, Y+56	; 0x38
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a e7       	ldi	r20, 0x7A	; 122
     f36:	55 e4       	ldi	r21, 0x45	; 69
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	89 ab       	std	Y+49, r24	; 0x31
     f42:	9a ab       	std	Y+50, r25	; 0x32
     f44:	ab ab       	std	Y+51, r26	; 0x33
     f46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f48:	69 a9       	ldd	r22, Y+49	; 0x31
     f4a:	7a a9       	ldd	r23, Y+50	; 0x32
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9c a9       	ldd	r25, Y+52	; 0x34
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	98 ab       	std	Y+48, r25	; 0x30
     f66:	8f a7       	std	Y+47, r24	; 0x2f
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
     f6a:	69 a9       	ldd	r22, Y+49	; 0x31
     f6c:	7a a9       	ldd	r23, Y+50	; 0x32
     f6e:	8b a9       	ldd	r24, Y+51	; 0x33
     f70:	9c a9       	ldd	r25, Y+52	; 0x34
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6d a9       	ldd	r22, Y+53	; 0x35
     f84:	7e a9       	ldd	r23, Y+54	; 0x36
     f86:	8f a9       	ldd	r24, Y+55	; 0x37
     f88:	98 ad       	ldd	r25, Y+56	; 0x38
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	98 ab       	std	Y+48, r25	; 0x30
     fa8:	8f a7       	std	Y+47, r24	; 0x2f
     faa:	0f c0       	rjmp	.+30     	; 0xfca <CLCD_voidSendCommand+0x13c>
     fac:	80 e9       	ldi	r24, 0x90	; 144
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	9e a7       	std	Y+46, r25	; 0x2e
     fb2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb4:	8d a5       	ldd	r24, Y+45	; 0x2d
     fb6:	9e a5       	ldd	r25, Y+46	; 0x2e
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <CLCD_voidSendCommand+0x12a>
     fbc:	9e a7       	std	Y+46, r25	; 0x2e
     fbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc2:	98 a9       	ldd	r25, Y+48	; 0x30
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	98 ab       	std	Y+48, r25	; 0x30
     fc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8f a5       	ldd	r24, Y+47	; 0x2f
     fcc:	98 a9       	ldd	r25, Y+48	; 0x30
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <CLCD_voidSendCommand+0x11e>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	69 a9       	ldd	r22, Y+49	; 0x31
     fd6:	7a a9       	ldd	r23, Y+50	; 0x32
     fd8:	8b a9       	ldd	r24, Y+51	; 0x33
     fda:	9c a9       	ldd	r25, Y+52	; 0x34
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	98 ab       	std	Y+48, r25	; 0x30
     fe6:	8f a7       	std	Y+47, r24	; 0x2f
     fe8:	8f a5       	ldd	r24, Y+47	; 0x2f
     fea:	98 a9       	ldd	r25, Y+48	; 0x30
     fec:	9c a7       	std	Y+44, r25	; 0x2c
     fee:	8b a7       	std	Y+43, r24	; 0x2b
     ff0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <CLCD_voidSendCommand+0x166>
     ff8:	9c a7       	std	Y+44, r25	; 0x2c
     ffa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e8       	ldi	r26, 0x80	; 128
    100c:	bf e3       	ldi	r27, 0x3F	; 63
    100e:	8f a3       	std	Y+39, r24	; 0x27
    1010:	98 a7       	std	Y+40, r25	; 0x28
    1012:	a9 a7       	std	Y+41, r26	; 0x29
    1014:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1016:	6f a1       	ldd	r22, Y+39	; 0x27
    1018:	78 a5       	ldd	r23, Y+40	; 0x28
    101a:	89 a5       	ldd	r24, Y+41	; 0x29
    101c:	9a a5       	ldd	r25, Y+42	; 0x2a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	4a e7       	ldi	r20, 0x7A	; 122
    1024:	55 e4       	ldi	r21, 0x45	; 69
    1026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	8b a3       	std	Y+35, r24	; 0x23
    1030:	9c a3       	std	Y+36, r25	; 0x24
    1032:	ad a3       	std	Y+37, r26	; 0x25
    1034:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1036:	6b a1       	ldd	r22, Y+35	; 0x23
    1038:	7c a1       	ldd	r23, Y+36	; 0x24
    103a:	8d a1       	ldd	r24, Y+37	; 0x25
    103c:	9e a1       	ldd	r25, Y+38	; 0x26
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    104a:	88 23       	and	r24, r24
    104c:	2c f4       	brge	.+10     	; 0x1058 <CLCD_voidSendCommand+0x1ca>
		__ticks = 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9a a3       	std	Y+34, r25	; 0x22
    1054:	89 a3       	std	Y+33, r24	; 0x21
    1056:	3f c0       	rjmp	.+126    	; 0x10d6 <CLCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
    1058:	6b a1       	ldd	r22, Y+35	; 0x23
    105a:	7c a1       	ldd	r23, Y+36	; 0x24
    105c:	8d a1       	ldd	r24, Y+37	; 0x25
    105e:	9e a1       	ldd	r25, Y+38	; 0x26
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	4f e7       	ldi	r20, 0x7F	; 127
    1066:	57 e4       	ldi	r21, 0x47	; 71
    1068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    106c:	18 16       	cp	r1, r24
    106e:	4c f5       	brge	.+82     	; 0x10c2 <CLCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1070:	6f a1       	ldd	r22, Y+39	; 0x27
    1072:	78 a5       	ldd	r23, Y+40	; 0x28
    1074:	89 a5       	ldd	r24, Y+41	; 0x29
    1076:	9a a5       	ldd	r25, Y+42	; 0x2a
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e2       	ldi	r20, 0x20	; 32
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9a a3       	std	Y+34, r25	; 0x22
    1096:	89 a3       	std	Y+33, r24	; 0x21
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <CLCD_voidSendCommand+0x22a>
    109a:	80 e9       	ldi	r24, 0x90	; 144
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	98 a3       	std	Y+32, r25	; 0x20
    10a0:	8f 8f       	std	Y+31, r24	; 0x1f
    10a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a4:	98 a1       	ldd	r25, Y+32	; 0x20
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <CLCD_voidSendCommand+0x218>
    10aa:	98 a3       	std	Y+32, r25	; 0x20
    10ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	89 a1       	ldd	r24, Y+33	; 0x21
    10b0:	9a a1       	ldd	r25, Y+34	; 0x22
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	9a a3       	std	Y+34, r25	; 0x22
    10b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ba:	9a a1       	ldd	r25, Y+34	; 0x22
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	69 f7       	brne	.-38     	; 0x109a <CLCD_voidSendCommand+0x20c>
    10c0:	14 c0       	rjmp	.+40     	; 0x10ea <CLCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c2:	6b a1       	ldd	r22, Y+35	; 0x23
    10c4:	7c a1       	ldd	r23, Y+36	; 0x24
    10c6:	8d a1       	ldd	r24, Y+37	; 0x25
    10c8:	9e a1       	ldd	r25, Y+38	; 0x26
    10ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9a a3       	std	Y+34, r25	; 0x22
    10d4:	89 a3       	std	Y+33, r24	; 0x21
    10d6:	89 a1       	ldd	r24, Y+33	; 0x21
    10d8:	9a a1       	ldd	r25, Y+34	; 0x22
    10da:	9e 8f       	std	Y+30, r25	; 0x1e
    10dc:	8d 8f       	std	Y+29, r24	; 0x1d
    10de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <CLCD_voidSendCommand+0x254>
    10e6:	9e 8f       	std	Y+30, r25	; 0x1e
    10e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Command,0)));
    10ea:	89 ad       	ldd	r24, Y+57	; 0x39
    10ec:	98 2f       	mov	r25, r24
    10ee:	91 70       	andi	r25, 0x01	; 1
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	49 2f       	mov	r20, r25
    10f6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Command,1)));
    10fa:	89 ad       	ldd	r24, Y+57	; 0x39
    10fc:	86 95       	lsr	r24
    10fe:	98 2f       	mov	r25, r24
    1100:	91 70       	andi	r25, 0x01	; 1
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	49 2f       	mov	r20, r25
    1108:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Command,2)));
    110c:	89 ad       	ldd	r24, Y+57	; 0x39
    110e:	86 95       	lsr	r24
    1110:	86 95       	lsr	r24
    1112:	98 2f       	mov	r25, r24
    1114:	91 70       	andi	r25, 0x01	; 1
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	49 2f       	mov	r20, r25
    111c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Command,3)));
    1120:	89 ad       	ldd	r24, Y+57	; 0x39
    1122:	86 95       	lsr	r24
    1124:	86 95       	lsr	r24
    1126:	86 95       	lsr	r24
    1128:	98 2f       	mov	r25, r24
    112a:	91 70       	andi	r25, 0x01	; 1
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	49 2f       	mov	r20, r25
    1132:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e8       	ldi	r26, 0x80	; 128
    1146:	bf e3       	ldi	r27, 0x3F	; 63
    1148:	89 8f       	std	Y+25, r24	; 0x19
    114a:	9a 8f       	std	Y+26, r25	; 0x1a
    114c:	ab 8f       	std	Y+27, r26	; 0x1b
    114e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	69 8d       	ldd	r22, Y+25	; 0x19
    1152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a e7       	ldi	r20, 0x7A	; 122
    115e:	55 e4       	ldi	r21, 0x45	; 69
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8d 8b       	std	Y+21, r24	; 0x15
    116a:	9e 8b       	std	Y+22, r25	; 0x16
    116c:	af 8b       	std	Y+23, r26	; 0x17
    116e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1170:	6d 89       	ldd	r22, Y+21	; 0x15
    1172:	7e 89       	ldd	r23, Y+22	; 0x16
    1174:	8f 89       	ldd	r24, Y+23	; 0x17
    1176:	98 8d       	ldd	r25, Y+24	; 0x18
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <CLCD_voidSendCommand+0x304>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 8b       	std	Y+20, r25	; 0x14
    118e:	8b 8b       	std	Y+19, r24	; 0x13
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <CLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <CLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	69 8d       	ldd	r22, Y+25	; 0x19
    11ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9c 8b       	std	Y+20, r25	; 0x14
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <CLCD_voidSendCommand+0x364>
    11d4:	80 e9       	ldi	r24, 0x90	; 144
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	9a 8b       	std	Y+18, r25	; 0x12
    11da:	89 8b       	std	Y+17, r24	; 0x11
    11dc:	89 89       	ldd	r24, Y+17	; 0x11
    11de:	9a 89       	ldd	r25, Y+18	; 0x12
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <CLCD_voidSendCommand+0x352>
    11e4:	9a 8b       	std	Y+18, r25	; 0x12
    11e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ea:	9c 89       	ldd	r25, Y+20	; 0x14
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9c 8b       	std	Y+20, r25	; 0x14
    11f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <CLCD_voidSendCommand+0x346>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <CLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6d 89       	ldd	r22, Y+21	; 0x15
    11fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1200:	8f 89       	ldd	r24, Y+23	; 0x17
    1202:	98 8d       	ldd	r25, Y+24	; 0x18
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9c 8b       	std	Y+20, r25	; 0x14
    120e:	8b 8b       	std	Y+19, r24	; 0x13
    1210:	8b 89       	ldd	r24, Y+19	; 0x13
    1212:	9c 89       	ldd	r25, Y+20	; 0x14
    1214:	98 8b       	std	Y+16, r25	; 0x10
    1216:	8f 87       	std	Y+15, r24	; 0x0f
    1218:	8f 85       	ldd	r24, Y+15	; 0x0f
    121a:	98 89       	ldd	r25, Y+16	; 0x10
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <CLCD_voidSendCommand+0x38e>
    1220:	98 8b       	std	Y+16, r25	; 0x10
    1222:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	62 e0       	ldi	r22, 0x02	; 2
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 e8       	ldi	r26, 0x80	; 128
    1234:	bf e3       	ldi	r27, 0x3F	; 63
    1236:	8b 87       	std	Y+11, r24	; 0x0b
    1238:	9c 87       	std	Y+12, r25	; 0x0c
    123a:	ad 87       	std	Y+13, r26	; 0x0d
    123c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1240:	7c 85       	ldd	r23, Y+12	; 0x0c
    1242:	8d 85       	ldd	r24, Y+13	; 0x0d
    1244:	9e 85       	ldd	r25, Y+14	; 0x0e
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4a e7       	ldi	r20, 0x7A	; 122
    124c:	55 e4       	ldi	r21, 0x45	; 69
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	8f 83       	std	Y+7, r24	; 0x07
    1258:	98 87       	std	Y+8, r25	; 0x08
    125a:	a9 87       	std	Y+9, r26	; 0x09
    125c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125e:	6f 81       	ldd	r22, Y+7	; 0x07
    1260:	78 85       	ldd	r23, Y+8	; 0x08
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e8       	ldi	r20, 0x80	; 128
    126c:	5f e3       	ldi	r21, 0x3F	; 63
    126e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1272:	88 23       	and	r24, r24
    1274:	2c f4       	brge	.+10     	; 0x1280 <CLCD_voidSendCommand+0x3f2>
		__ticks = 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	3f c0       	rjmp	.+126    	; 0x12fe <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	4c f5       	brge	.+82     	; 0x12ea <CLCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	6b 85       	ldd	r22, Y+11	; 0x0b
    129a:	7c 85       	ldd	r23, Y+12	; 0x0c
    129c:	8d 85       	ldd	r24, Y+13	; 0x0d
    129e:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e2       	ldi	r20, 0x20	; 32
    12a6:	51 e4       	ldi	r21, 0x41	; 65
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <CLCD_voidSendCommand+0x452>
    12c2:	80 e9       	ldi	r24, 0x90	; 144
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <CLCD_voidSendCommand+0x440>
    12d2:	9c 83       	std	Y+4, r25	; 0x04
    12d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	69 f7       	brne	.-38     	; 0x12c2 <CLCD_voidSendCommand+0x434>
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <CLCD_voidSendCommand+0x47c>
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
	_delay_ms(1);

#endif
}
    1312:	e9 96       	adiw	r28, 0x39	; 57
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 CLCD_u8Data)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	e9 97       	sbiw	r28, 0x39	; 57
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	89 af       	std	Y+57, r24	; 0x39
	//Set RS = 1
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	63 e0       	ldi	r22, 0x03	; 3
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	// EN high
	//DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);

	//Send Command
#if	(LCD_MODE	==	LCD_4BIT)
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Data,4)));
    1344:	89 ad       	ldd	r24, Y+57	; 0x39
    1346:	82 95       	swap	r24
    1348:	8f 70       	andi	r24, 0x0F	; 15
    134a:	98 2f       	mov	r25, r24
    134c:	91 70       	andi	r25, 0x01	; 1
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	49 2f       	mov	r20, r25
    1354:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Data,5)));
    1358:	89 ad       	ldd	r24, Y+57	; 0x39
    135a:	82 95       	swap	r24
    135c:	86 95       	lsr	r24
    135e:	87 70       	andi	r24, 0x07	; 7
    1360:	98 2f       	mov	r25, r24
    1362:	91 70       	andi	r25, 0x01	; 1
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	49 2f       	mov	r20, r25
    136a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Data,6)));
    136e:	89 ad       	ldd	r24, Y+57	; 0x39
    1370:	82 95       	swap	r24
    1372:	86 95       	lsr	r24
    1374:	86 95       	lsr	r24
    1376:	83 70       	andi	r24, 0x03	; 3
    1378:	98 2f       	mov	r25, r24
    137a:	91 70       	andi	r25, 0x01	; 1
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	49 2f       	mov	r20, r25
    1382:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Data,7)));
    1386:	89 ad       	ldd	r24, Y+57	; 0x39
    1388:	98 2f       	mov	r25, r24
    138a:	99 1f       	adc	r25, r25
    138c:	99 27       	eor	r25, r25
    138e:	99 1f       	adc	r25, r25
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	49 2f       	mov	r20, r25
    1396:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	41 e0       	ldi	r20, 0x01	; 1
    13a0:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a0 e8       	ldi	r26, 0x80	; 128
    13aa:	bf e3       	ldi	r27, 0x3F	; 63
    13ac:	8d ab       	std	Y+53, r24	; 0x35
    13ae:	9e ab       	std	Y+54, r25	; 0x36
    13b0:	af ab       	std	Y+55, r26	; 0x37
    13b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b4:	6d a9       	ldd	r22, Y+53	; 0x35
    13b6:	7e a9       	ldd	r23, Y+54	; 0x36
    13b8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ba:	98 ad       	ldd	r25, Y+56	; 0x38
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a e7       	ldi	r20, 0x7A	; 122
    13c2:	55 e4       	ldi	r21, 0x45	; 69
    13c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	89 ab       	std	Y+49, r24	; 0x31
    13ce:	9a ab       	std	Y+50, r25	; 0x32
    13d0:	ab ab       	std	Y+51, r26	; 0x33
    13d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13d4:	69 a9       	ldd	r22, Y+49	; 0x31
    13d6:	7a a9       	ldd	r23, Y+50	; 0x32
    13d8:	8b a9       	ldd	r24, Y+51	; 0x33
    13da:	9c a9       	ldd	r25, Y+52	; 0x34
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e8       	ldi	r20, 0x80	; 128
    13e2:	5f e3       	ldi	r21, 0x3F	; 63
    13e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13e8:	88 23       	and	r24, r24
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
    13f4:	3f c0       	rjmp	.+126    	; 0x1474 <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    13f6:	69 a9       	ldd	r22, Y+49	; 0x31
    13f8:	7a a9       	ldd	r23, Y+50	; 0x32
    13fa:	8b a9       	ldd	r24, Y+51	; 0x33
    13fc:	9c a9       	ldd	r25, Y+52	; 0x34
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	57 e4       	ldi	r21, 0x47	; 71
    1406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    140a:	18 16       	cp	r1, r24
    140c:	4c f5       	brge	.+82     	; 0x1460 <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140e:	6d a9       	ldd	r22, Y+53	; 0x35
    1410:	7e a9       	ldd	r23, Y+54	; 0x36
    1412:	8f a9       	ldd	r24, Y+55	; 0x37
    1414:	98 ad       	ldd	r25, Y+56	; 0x38
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e2       	ldi	r20, 0x20	; 32
    141c:	51 e4       	ldi	r21, 0x41	; 65
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	98 ab       	std	Y+48, r25	; 0x30
    1434:	8f a7       	std	Y+47, r24	; 0x2f
    1436:	0f c0       	rjmp	.+30     	; 0x1456 <CLCD_voidSendData+0x132>
    1438:	80 e9       	ldi	r24, 0x90	; 144
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	9e a7       	std	Y+46, r25	; 0x2e
    143e:	8d a7       	std	Y+45, r24	; 0x2d
    1440:	8d a5       	ldd	r24, Y+45	; 0x2d
    1442:	9e a5       	ldd	r25, Y+46	; 0x2e
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <CLCD_voidSendData+0x120>
    1448:	9e a7       	std	Y+46, r25	; 0x2e
    144a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	98 ab       	std	Y+48, r25	; 0x30
    1454:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	8f a5       	ldd	r24, Y+47	; 0x2f
    1458:	98 a9       	ldd	r25, Y+48	; 0x30
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	69 f7       	brne	.-38     	; 0x1438 <CLCD_voidSendData+0x114>
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	69 a9       	ldd	r22, Y+49	; 0x31
    1462:	7a a9       	ldd	r23, Y+50	; 0x32
    1464:	8b a9       	ldd	r24, Y+51	; 0x33
    1466:	9c a9       	ldd	r25, Y+52	; 0x34
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	98 ab       	std	Y+48, r25	; 0x30
    1472:	8f a7       	std	Y+47, r24	; 0x2f
    1474:	8f a5       	ldd	r24, Y+47	; 0x2f
    1476:	98 a9       	ldd	r25, Y+48	; 0x30
    1478:	9c a7       	std	Y+44, r25	; 0x2c
    147a:	8b a7       	std	Y+43, r24	; 0x2b
    147c:	8b a5       	ldd	r24, Y+43	; 0x2b
    147e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <CLCD_voidSendData+0x15c>
    1484:	9c a7       	std	Y+44, r25	; 0x2c
    1486:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	62 e0       	ldi	r22, 0x02	; 2
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e8       	ldi	r26, 0x80	; 128
    1498:	bf e3       	ldi	r27, 0x3F	; 63
    149a:	8f a3       	std	Y+39, r24	; 0x27
    149c:	98 a7       	std	Y+40, r25	; 0x28
    149e:	a9 a7       	std	Y+41, r26	; 0x29
    14a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a2:	6f a1       	ldd	r22, Y+39	; 0x27
    14a4:	78 a5       	ldd	r23, Y+40	; 0x28
    14a6:	89 a5       	ldd	r24, Y+41	; 0x29
    14a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a e7       	ldi	r20, 0x7A	; 122
    14b0:	55 e4       	ldi	r21, 0x45	; 69
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	8b a3       	std	Y+35, r24	; 0x23
    14bc:	9c a3       	std	Y+36, r25	; 0x24
    14be:	ad a3       	std	Y+37, r26	; 0x25
    14c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14c2:	6b a1       	ldd	r22, Y+35	; 0x23
    14c4:	7c a1       	ldd	r23, Y+36	; 0x24
    14c6:	8d a1       	ldd	r24, Y+37	; 0x25
    14c8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d6:	88 23       	and	r24, r24
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9a a3       	std	Y+34, r25	; 0x22
    14e0:	89 a3       	std	Y+33, r24	; 0x21
    14e2:	3f c0       	rjmp	.+126    	; 0x1562 <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    14e4:	6b a1       	ldd	r22, Y+35	; 0x23
    14e6:	7c a1       	ldd	r23, Y+36	; 0x24
    14e8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ea:	9e a1       	ldd	r25, Y+38	; 0x26
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4f e7       	ldi	r20, 0x7F	; 127
    14f2:	57 e4       	ldi	r21, 0x47	; 71
    14f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14f8:	18 16       	cp	r1, r24
    14fa:	4c f5       	brge	.+82     	; 0x154e <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fc:	6f a1       	ldd	r22, Y+39	; 0x27
    14fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1500:	89 a5       	ldd	r24, Y+41	; 0x29
    1502:	9a a5       	ldd	r25, Y+42	; 0x2a
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	9a a3       	std	Y+34, r25	; 0x22
    1522:	89 a3       	std	Y+33, r24	; 0x21
    1524:	0f c0       	rjmp	.+30     	; 0x1544 <CLCD_voidSendData+0x220>
    1526:	80 e9       	ldi	r24, 0x90	; 144
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	98 a3       	std	Y+32, r25	; 0x20
    152c:	8f 8f       	std	Y+31, r24	; 0x1f
    152e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1530:	98 a1       	ldd	r25, Y+32	; 0x20
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <CLCD_voidSendData+0x20e>
    1536:	98 a3       	std	Y+32, r25	; 0x20
    1538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153a:	89 a1       	ldd	r24, Y+33	; 0x21
    153c:	9a a1       	ldd	r25, Y+34	; 0x22
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	9a a3       	std	Y+34, r25	; 0x22
    1542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1544:	89 a1       	ldd	r24, Y+33	; 0x21
    1546:	9a a1       	ldd	r25, Y+34	; 0x22
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	69 f7       	brne	.-38     	; 0x1526 <CLCD_voidSendData+0x202>
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154e:	6b a1       	ldd	r22, Y+35	; 0x23
    1550:	7c a1       	ldd	r23, Y+36	; 0x24
    1552:	8d a1       	ldd	r24, Y+37	; 0x25
    1554:	9e a1       	ldd	r25, Y+38	; 0x26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9a a3       	std	Y+34, r25	; 0x22
    1560:	89 a3       	std	Y+33, r24	; 0x21
    1562:	89 a1       	ldd	r24, Y+33	; 0x21
    1564:	9a a1       	ldd	r25, Y+34	; 0x22
    1566:	9e 8f       	std	Y+30, r25	; 0x1e
    1568:	8d 8f       	std	Y+29, r24	; 0x1d
    156a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <CLCD_voidSendData+0x24a>
    1572:	9e 8f       	std	Y+30, r25	; 0x1e
    1574:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Data,0)));
    1576:	89 ad       	ldd	r24, Y+57	; 0x39
    1578:	98 2f       	mov	r25, r24
    157a:	91 70       	andi	r25, 0x01	; 1
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	49 2f       	mov	r20, r25
    1582:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Data,1)));
    1586:	89 ad       	ldd	r24, Y+57	; 0x39
    1588:	86 95       	lsr	r24
    158a:	98 2f       	mov	r25, r24
    158c:	91 70       	andi	r25, 0x01	; 1
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	49 2f       	mov	r20, r25
    1594:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Data,2)));
    1598:	89 ad       	ldd	r24, Y+57	; 0x39
    159a:	86 95       	lsr	r24
    159c:	86 95       	lsr	r24
    159e:	98 2f       	mov	r25, r24
    15a0:	91 70       	andi	r25, 0x01	; 1
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	49 2f       	mov	r20, r25
    15a8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Data,3)));
    15ac:	89 ad       	ldd	r24, Y+57	; 0x39
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	86 95       	lsr	r24
    15b4:	98 2f       	mov	r25, r24
    15b6:	91 70       	andi	r25, 0x01	; 1
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	64 e0       	ldi	r22, 0x04	; 4
    15bc:	49 2f       	mov	r20, r25
    15be:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e8       	ldi	r26, 0x80	; 128
    15d2:	bf e3       	ldi	r27, 0x3F	; 63
    15d4:	89 8f       	std	Y+25, r24	; 0x19
    15d6:	9a 8f       	std	Y+26, r25	; 0x1a
    15d8:	ab 8f       	std	Y+27, r26	; 0x1b
    15da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	69 8d       	ldd	r22, Y+25	; 0x19
    15de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4a e7       	ldi	r20, 0x7A	; 122
    15ea:	55 e4       	ldi	r21, 0x45	; 69
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	8d 8b       	std	Y+21, r24	; 0x15
    15f6:	9e 8b       	std	Y+22, r25	; 0x16
    15f8:	af 8b       	std	Y+23, r26	; 0x17
    15fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15fc:	6d 89       	ldd	r22, Y+21	; 0x15
    15fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1610:	88 23       	and	r24, r24
    1612:	2c f4       	brge	.+10     	; 0x161e <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9c 8b       	std	Y+20, r25	; 0x14
    161a:	8b 8b       	std	Y+19, r24	; 0x13
    161c:	3f c0       	rjmp	.+126    	; 0x169c <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    161e:	6d 89       	ldd	r22, Y+21	; 0x15
    1620:	7e 89       	ldd	r23, Y+22	; 0x16
    1622:	8f 89       	ldd	r24, Y+23	; 0x17
    1624:	98 8d       	ldd	r25, Y+24	; 0x18
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1632:	18 16       	cp	r1, r24
    1634:	4c f5       	brge	.+82     	; 0x1688 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1636:	69 8d       	ldd	r22, Y+25	; 0x19
    1638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    163a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    163c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9c 8b       	std	Y+20, r25	; 0x14
    165c:	8b 8b       	std	Y+19, r24	; 0x13
    165e:	0f c0       	rjmp	.+30     	; 0x167e <CLCD_voidSendData+0x35a>
    1660:	80 e9       	ldi	r24, 0x90	; 144
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	9a 8b       	std	Y+18, r25	; 0x12
    1666:	89 8b       	std	Y+17, r24	; 0x11
    1668:	89 89       	ldd	r24, Y+17	; 0x11
    166a:	9a 89       	ldd	r25, Y+18	; 0x12
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <CLCD_voidSendData+0x348>
    1670:	9a 8b       	std	Y+18, r25	; 0x12
    1672:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	8b 89       	ldd	r24, Y+19	; 0x13
    1676:	9c 89       	ldd	r25, Y+20	; 0x14
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 8b       	std	Y+20, r25	; 0x14
    167c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	8b 89       	ldd	r24, Y+19	; 0x13
    1680:	9c 89       	ldd	r25, Y+20	; 0x14
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	69 f7       	brne	.-38     	; 0x1660 <CLCD_voidSendData+0x33c>
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	9c 89       	ldd	r25, Y+20	; 0x14
    16a0:	98 8b       	std	Y+16, r25	; 0x10
    16a2:	8f 87       	std	Y+15, r24	; 0x0f
    16a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a6:	98 89       	ldd	r25, Y+16	; 0x10
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <CLCD_voidSendData+0x384>
    16ac:	98 8b       	std	Y+16, r25	; 0x10
    16ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	bf e3       	ldi	r27, 0x3F	; 63
    16c2:	8b 87       	std	Y+11, r24	; 0x0b
    16c4:	9c 87       	std	Y+12, r25	; 0x0c
    16c6:	ad 87       	std	Y+13, r26	; 0x0d
    16c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    16cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a e7       	ldi	r20, 0x7A	; 122
    16d8:	55 e4       	ldi	r21, 0x45	; 69
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8f 83       	std	Y+7, r24	; 0x07
    16e4:	98 87       	std	Y+8, r25	; 0x08
    16e6:	a9 87       	std	Y+9, r26	; 0x09
    16e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	3f c0       	rjmp	.+126    	; 0x178a <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	0f c0       	rjmp	.+30     	; 0x176c <CLCD_voidSendData+0x448>
    174e:	80 e9       	ldi	r24, 0x90	; 144
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <CLCD_voidSendData+0x436>
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <CLCD_voidSendData+0x42a>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <CLCD_voidSendData+0x472>
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
	_delay_ms(1);

#endif
}
    179e:	e9 96       	adiw	r28, 0x39	; 57
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	c4 5c       	subi	r28, 0xC4	; 196
    17be:	d0 40       	sbci	r29, 0x00	; 0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(CLCD_PORT, DIO_PORT_OUTPUT);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	0e 94 05 1a 	call	0x340a	; 0x340a <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	62 e0       	ldi	r22, 0x02	; 2
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	63 e0       	ldi	r22, 0x03	; 3
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
    17e6:	fe 01       	movw	r30, r28
    17e8:	ef 53       	subi	r30, 0x3F	; 63
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 ef       	ldi	r26, 0xF0	; 240
    17f2:	b1 e4       	ldi	r27, 0x41	; 65
    17f4:	80 83       	st	Z, r24
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	a2 83       	std	Z+2, r26	; 0x02
    17fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	8e 01       	movw	r16, r28
    17fe:	03 54       	subi	r16, 0x43	; 67
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	fe 01       	movw	r30, r28
    1804:	ef 53       	subi	r30, 0x3F	; 63
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	55 e4       	ldi	r21, 0x45	; 69
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	f8 01       	movw	r30, r16
    1822:	80 83       	st	Z, r24
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	a2 83       	std	Z+2, r26	; 0x02
    1828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182a:	fe 01       	movw	r30, r28
    182c:	e3 54       	subi	r30, 0x43	; 67
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	44 f4       	brge	.+16     	; 0x1858 <CLCD_voidInit+0xa8>
		__ticks = 1;
    1848:	fe 01       	movw	r30, r28
    184a:	e5 54       	subi	r30, 0x45	; 69
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	64 c0       	rjmp	.+200    	; 0x1920 <CLCD_voidInit+0x170>
	else if (__tmp > 65535)
    1858:	fe 01       	movw	r30, r28
    185a:	e3 54       	subi	r30, 0x43	; 67
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	0c f0       	brlt	.+2      	; 0x1878 <CLCD_voidInit+0xc8>
    1876:	43 c0       	rjmp	.+134    	; 0x18fe <CLCD_voidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	fe 01       	movw	r30, r28
    187a:	ef 53       	subi	r30, 0x3F	; 63
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8e 01       	movw	r16, r28
    1898:	05 54       	subi	r16, 0x45	; 69
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	1f c0       	rjmp	.+62     	; 0x18ee <CLCD_voidInit+0x13e>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e7 54       	subi	r30, 0x47	; 71
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 e9       	ldi	r24, 0x90	; 144
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
    18be:	fe 01       	movw	r30, r28
    18c0:	e7 54       	subi	r30, 0x47	; 71
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <CLCD_voidInit+0x118>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e7 54       	subi	r30, 0x47	; 71
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	de 01       	movw	r26, r28
    18d8:	a5 54       	subi	r26, 0x45	; 69
    18da:	bf 4f       	sbci	r27, 0xFF	; 255
    18dc:	fe 01       	movw	r30, r28
    18de:	e5 54       	subi	r30, 0x45	; 69
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	9c 93       	st	X, r25
    18ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	fe 01       	movw	r30, r28
    18f0:	e5 54       	subi	r30, 0x45	; 69
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	d1 f6       	brne	.-76     	; 0x18b0 <CLCD_voidInit+0x100>
    18fc:	27 c0       	rjmp	.+78     	; 0x194c <CLCD_voidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fe:	8e 01       	movw	r16, r28
    1900:	05 54       	subi	r16, 0x45	; 69
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
    1904:	fe 01       	movw	r30, r28
    1906:	e3 54       	subi	r30, 0x43	; 67
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	f8 01       	movw	r30, r16
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	de 01       	movw	r26, r28
    1922:	a9 54       	subi	r26, 0x49	; 73
    1924:	bf 4f       	sbci	r27, 0xFF	; 255
    1926:	fe 01       	movw	r30, r28
    1928:	e5 54       	subi	r30, 0x45	; 69
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	8d 93       	st	X+, r24
    1932:	9c 93       	st	X, r25
    1934:	fe 01       	movw	r30, r28
    1936:	e9 54       	subi	r30, 0x49	; 73
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <CLCD_voidInit+0x18e>
    1942:	fe 01       	movw	r30, r28
    1944:	e9 54       	subi	r30, 0x49	; 73
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
	//DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
	_delay_ms(30);
	CLCD_voidSendCommand(0x38);
    194c:	88 e3       	ldi	r24, 0x38	; 56
    194e:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    1952:	fe 01       	movw	r30, r28
    1954:	ed 54       	subi	r30, 0x4D	; 77
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 ea       	ldi	r26, 0xA0	; 160
    195e:	b0 e4       	ldi	r27, 0x40	; 64
    1960:	80 83       	st	Z, r24
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	a2 83       	std	Z+2, r26	; 0x02
    1966:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	8e 01       	movw	r16, r28
    196a:	01 55       	subi	r16, 0x51	; 81
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	fe 01       	movw	r30, r28
    1970:	ed 54       	subi	r30, 0x4D	; 77
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	55 e4       	ldi	r21, 0x45	; 69
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1996:	fe 01       	movw	r30, r28
    1998:	e1 55       	subi	r30, 0x51	; 81
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	44 f4       	brge	.+16     	; 0x19c4 <CLCD_voidInit+0x214>
		__ticks = 1;
    19b4:	fe 01       	movw	r30, r28
    19b6:	e3 55       	subi	r30, 0x53	; 83
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	64 c0       	rjmp	.+200    	; 0x1a8c <CLCD_voidInit+0x2dc>
	else if (__tmp > 65535)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e1 55       	subi	r30, 0x51	; 81
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	0c f0       	brlt	.+2      	; 0x19e4 <CLCD_voidInit+0x234>
    19e2:	43 c0       	rjmp	.+134    	; 0x1a6a <CLCD_voidInit+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	fe 01       	movw	r30, r28
    19e6:	ed 54       	subi	r30, 0x4D	; 77
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8e 01       	movw	r16, r28
    1a04:	03 55       	subi	r16, 0x53	; 83
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	f8 01       	movw	r30, r16
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	1f c0       	rjmp	.+62     	; 0x1a5a <CLCD_voidInit+0x2aa>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e5 55       	subi	r30, 0x55	; 85
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 e9       	ldi	r24, 0x90	; 144
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e5 55       	subi	r30, 0x55	; 85
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <CLCD_voidInit+0x284>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e5 55       	subi	r30, 0x55	; 85
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	de 01       	movw	r26, r28
    1a44:	a3 55       	subi	r26, 0x53	; 83
    1a46:	bf 4f       	sbci	r27, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e3 55       	subi	r30, 0x53	; 83
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	11 96       	adiw	r26, 0x01	; 1
    1a56:	9c 93       	st	X, r25
    1a58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e3 55       	subi	r30, 0x53	; 83
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	d1 f6       	brne	.-76     	; 0x1a1c <CLCD_voidInit+0x26c>
    1a68:	27 c0       	rjmp	.+78     	; 0x1ab8 <CLCD_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	03 55       	subi	r16, 0x53	; 83
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	fe 01       	movw	r30, r28
    1a72:	e1 55       	subi	r30, 0x51	; 81
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	f8 01       	movw	r30, r16
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	80 83       	st	Z, r24
    1a8c:	de 01       	movw	r26, r28
    1a8e:	a7 55       	subi	r26, 0x57	; 87
    1a90:	bf 4f       	sbci	r27, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	e3 55       	subi	r30, 0x53	; 83
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	8d 93       	st	X+, r24
    1a9e:	9c 93       	st	X, r25
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e7 55       	subi	r30, 0x57	; 87
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <CLCD_voidInit+0x2fa>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e7 55       	subi	r30, 0x57	; 87
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
	_delay_ms(5);
	CLCD_voidSendCommand(0x38);
    1ab8:	88 e3       	ldi	r24, 0x38	; 56
    1aba:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    1abe:	fe 01       	movw	r30, r28
    1ac0:	eb 55       	subi	r30, 0x5B	; 91
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a6 e1       	ldi	r26, 0x16	; 22
    1aca:	b3 e4       	ldi	r27, 0x43	; 67
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	a2 83       	std	Z+2, r26	; 0x02
    1ad2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ad4:	8e 01       	movw	r16, r28
    1ad6:	0f 55       	subi	r16, 0x5F	; 95
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	fe 01       	movw	r30, r28
    1adc:	eb 55       	subi	r30, 0x5B	; 91
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	2b ea       	ldi	r18, 0xAB	; 171
    1aea:	3a ea       	ldi	r19, 0xAA	; 170
    1aec:	4a ea       	ldi	r20, 0xAA	; 170
    1aee:	50 e4       	ldi	r21, 0x40	; 64
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	f8 01       	movw	r30, r16
    1afa:	80 83       	st	Z, r24
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	a2 83       	std	Z+2, r26	; 0x02
    1b00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b02:	fe 01       	movw	r30, r28
    1b04:	ef 55       	subi	r30, 0x5F	; 95
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	34 f4       	brge	.+12     	; 0x1b2c <CLCD_voidInit+0x37c>
		__ticks = 1;
    1b20:	fe 01       	movw	r30, r28
    1b22:	e0 56       	subi	r30, 0x60	; 96
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 83       	st	Z, r24
    1b2a:	e0 c0       	rjmp	.+448    	; 0x1cec <CLCD_voidInit+0x53c>
	else if (__tmp > 255)
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ef 55       	subi	r30, 0x5F	; 95
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	53 e4       	ldi	r21, 0x43	; 67
    1b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	0c f0       	brlt	.+2      	; 0x1b4c <CLCD_voidInit+0x39c>
    1b4a:	c0 c0       	rjmp	.+384    	; 0x1ccc <CLCD_voidInit+0x51c>
	{
		_delay_ms(__us / 1000.0);
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	eb 55       	subi	r30, 0x5B	; 91
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a e7       	ldi	r20, 0x7A	; 122
    1b60:	54 e4       	ldi	r21, 0x44	; 68
    1b62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e4 56       	subi	r30, 0x64	; 100
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 83       	st	Z, r24
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	a2 83       	std	Z+2, r26	; 0x02
    1b76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	8e 01       	movw	r16, r28
    1b7a:	08 56       	subi	r16, 0x68	; 104
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e4 56       	subi	r30, 0x64	; 100
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a e7       	ldi	r20, 0x7A	; 122
    1b92:	55 e4       	ldi	r21, 0x45	; 69
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	80 83       	st	Z, r24
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	a2 83       	std	Z+2, r26	; 0x02
    1ba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e8 56       	subi	r30, 0x68	; 104
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	44 f4       	brge	.+16     	; 0x1bd4 <CLCD_voidInit+0x424>
		__ticks = 1;
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ea 56       	subi	r30, 0x6A	; 106
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	64 c0       	rjmp	.+200    	; 0x1c9c <CLCD_voidInit+0x4ec>
	else if (__tmp > 65535)
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e8 56       	subi	r30, 0x68	; 104
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	0c f0       	brlt	.+2      	; 0x1bf4 <CLCD_voidInit+0x444>
    1bf2:	43 c0       	rjmp	.+134    	; 0x1c7a <CLCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e4 56       	subi	r30, 0x64	; 100
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8e 01       	movw	r16, r28
    1c14:	0a 56       	subi	r16, 0x6A	; 106
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	f8 01       	movw	r30, r16
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	1f c0       	rjmp	.+62     	; 0x1c6a <CLCD_voidInit+0x4ba>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ec 56       	subi	r30, 0x6C	; 108
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 e9       	ldi	r24, 0x90	; 144
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ec 56       	subi	r30, 0x6C	; 108
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <CLCD_voidInit+0x494>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ec 56       	subi	r30, 0x6C	; 108
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	de 01       	movw	r26, r28
    1c54:	aa 56       	subi	r26, 0x6A	; 106
    1c56:	bf 4f       	sbci	r27, 0xFF	; 255
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ea 56       	subi	r30, 0x6A	; 106
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	11 96       	adiw	r26, 0x01	; 1
    1c66:	9c 93       	st	X, r25
    1c68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ea 56       	subi	r30, 0x6A	; 106
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	d1 f6       	brne	.-76     	; 0x1c2c <CLCD_voidInit+0x47c>
    1c78:	4b c0       	rjmp	.+150    	; 0x1d10 <CLCD_voidInit+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	0a 56       	subi	r16, 0x6A	; 106
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e8 56       	subi	r30, 0x68	; 104
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	f8 01       	movw	r30, r16
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	de 01       	movw	r26, r28
    1c9e:	ae 56       	subi	r26, 0x6E	; 110
    1ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ea 56       	subi	r30, 0x6A	; 106
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	9c 93       	st	X, r25
    1cb0:	8e 93       	st	-X, r24
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ee 56       	subi	r30, 0x6E	; 110
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <CLCD_voidInit+0x50c>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ee 56       	subi	r30, 0x6E	; 110
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	91 83       	std	Z+1, r25	; 0x01
    1cc8:	80 83       	st	Z, r24
    1cca:	22 c0       	rjmp	.+68     	; 0x1d10 <CLCD_voidInit+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ccc:	8e 01       	movw	r16, r28
    1cce:	00 56       	subi	r16, 0x60	; 96
    1cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ef 55       	subi	r30, 0x5F	; 95
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	f8 01       	movw	r30, r16
    1cea:	80 83       	st	Z, r24
    1cec:	de 01       	movw	r26, r28
    1cee:	af 56       	subi	r26, 0x6F	; 111
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e0 56       	subi	r30, 0x60	; 96
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ef 56       	subi	r30, 0x6F	; 111
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	8a 95       	dec	r24
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <CLCD_voidInit+0x554>
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ef 56       	subi	r30, 0x6F	; 111
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x38);
    1d10:	88 e3       	ldi	r24, 0x38	; 56
    1d12:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    1d16:	fe 01       	movw	r30, r28
    1d18:	e3 57       	subi	r30, 0x73	; 115
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a6 e1       	ldi	r26, 0x16	; 22
    1d22:	b3 e4       	ldi	r27, 0x43	; 67
    1d24:	80 83       	st	Z, r24
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	a2 83       	std	Z+2, r26	; 0x02
    1d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	07 57       	subi	r16, 0x77	; 119
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	fe 01       	movw	r30, r28
    1d34:	e3 57       	subi	r30, 0x73	; 115
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	2b ea       	ldi	r18, 0xAB	; 171
    1d42:	3a ea       	ldi	r19, 0xAA	; 170
    1d44:	4a ea       	ldi	r20, 0xAA	; 170
    1d46:	50 e4       	ldi	r21, 0x40	; 64
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	f8 01       	movw	r30, r16
    1d52:	80 83       	st	Z, r24
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	a2 83       	std	Z+2, r26	; 0x02
    1d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e7 57       	subi	r30, 0x77	; 119
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	34 f4       	brge	.+12     	; 0x1d84 <CLCD_voidInit+0x5d4>
		__ticks = 1;
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e8 57       	subi	r30, 0x78	; 120
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 83       	st	Z, r24
    1d82:	e0 c0       	rjmp	.+448    	; 0x1f44 <CLCD_voidInit+0x794>
	else if (__tmp > 255)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e7 57       	subi	r30, 0x77	; 119
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	53 e4       	ldi	r21, 0x43	; 67
    1d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <CLCD_voidInit+0x5f4>
    1da2:	c0 c0       	rjmp	.+384    	; 0x1f24 <CLCD_voidInit+0x774>
	{
		_delay_ms(__us / 1000.0);
    1da4:	fe 01       	movw	r30, r28
    1da6:	e3 57       	subi	r30, 0x73	; 115
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a e7       	ldi	r20, 0x7A	; 122
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ec 57       	subi	r30, 0x7C	; 124
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 83       	st	Z, r24
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	a2 83       	std	Z+2, r26	; 0x02
    1dce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	00 58       	subi	r16, 0x80	; 128
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	ec 57       	subi	r30, 0x7C	; 124
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	60 81       	ld	r22, Z
    1dde:	71 81       	ldd	r23, Z+1	; 0x01
    1de0:	82 81       	ldd	r24, Z+2	; 0x02
    1de2:	93 81       	ldd	r25, Z+3	; 0x03
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a e7       	ldi	r20, 0x7A	; 122
    1dea:	55 e4       	ldi	r21, 0x45	; 69
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	f8 01       	movw	r30, r16
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	a2 83       	std	Z+2, r26	; 0x02
    1dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e0 58       	subi	r30, 0x80	; 128
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	44 f4       	brge	.+16     	; 0x1e2c <CLCD_voidInit+0x67c>
		__ticks = 1;
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e2 58       	subi	r30, 0x82	; 130
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
    1e2a:	64 c0       	rjmp	.+200    	; 0x1ef4 <CLCD_voidInit+0x744>
	else if (__tmp > 65535)
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e0 58       	subi	r30, 0x80	; 128
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	0c f0       	brlt	.+2      	; 0x1e4c <CLCD_voidInit+0x69c>
    1e4a:	43 c0       	rjmp	.+134    	; 0x1ed2 <CLCD_voidInit+0x722>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ec 57       	subi	r30, 0x7C	; 124
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	02 58       	subi	r16, 0x82	; 130
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	1f c0       	rjmp	.+62     	; 0x1ec2 <CLCD_voidInit+0x712>
    1e84:	fe 01       	movw	r30, r28
    1e86:	e4 58       	subi	r30, 0x84	; 132
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 e9       	ldi	r24, 0x90	; 144
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e92:	fe 01       	movw	r30, r28
    1e94:	e4 58       	subi	r30, 0x84	; 132
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <CLCD_voidInit+0x6ec>
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e4 58       	subi	r30, 0x84	; 132
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	de 01       	movw	r26, r28
    1eac:	a2 58       	subi	r26, 0x82	; 130
    1eae:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e2 58       	subi	r30, 0x82	; 130
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	11 96       	adiw	r26, 0x01	; 1
    1ebe:	9c 93       	st	X, r25
    1ec0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e2 58       	subi	r30, 0x82	; 130
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	d1 f6       	brne	.-76     	; 0x1e84 <CLCD_voidInit+0x6d4>
    1ed0:	4b c0       	rjmp	.+150    	; 0x1f68 <CLCD_voidInit+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	8e 01       	movw	r16, r28
    1ed4:	02 58       	subi	r16, 0x82	; 130
    1ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e0 58       	subi	r30, 0x80	; 128
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	f8 01       	movw	r30, r16
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
    1ef4:	de 01       	movw	r26, r28
    1ef6:	a6 58       	subi	r26, 0x86	; 134
    1ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	e2 58       	subi	r30, 0x82	; 130
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	11 96       	adiw	r26, 0x01	; 1
    1f06:	9c 93       	st	X, r25
    1f08:	8e 93       	st	-X, r24
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e6 58       	subi	r30, 0x86	; 134
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <CLCD_voidInit+0x764>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e6 58       	subi	r30, 0x86	; 134
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	22 c0       	rjmp	.+68     	; 0x1f68 <CLCD_voidInit+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f24:	8e 01       	movw	r16, r28
    1f26:	08 57       	subi	r16, 0x78	; 120
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e7 57       	subi	r30, 0x77	; 119
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 83       	st	Z, r24
    1f44:	de 01       	movw	r26, r28
    1f46:	a7 58       	subi	r26, 0x87	; 135
    1f48:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e8 57       	subi	r30, 0x78	; 120
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f54:	fe 01       	movw	r30, r28
    1f56:	e7 58       	subi	r30, 0x87	; 135
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8a 95       	dec	r24
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <CLCD_voidInit+0x7ac>
    1f60:	fe 01       	movw	r30, r28
    1f62:	e7 58       	subi	r30, 0x87	; 135
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x01);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    1f6e:	fe 01       	movw	r30, r28
    1f70:	eb 58       	subi	r30, 0x8B	; 139
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a6 e1       	ldi	r26, 0x16	; 22
    1f7a:	b3 e4       	ldi	r27, 0x43	; 67
    1f7c:	80 83       	st	Z, r24
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	a2 83       	std	Z+2, r26	; 0x02
    1f82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f84:	8e 01       	movw	r16, r28
    1f86:	0f 58       	subi	r16, 0x8F	; 143
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	eb 58       	subi	r30, 0x8B	; 139
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	2b ea       	ldi	r18, 0xAB	; 171
    1f9a:	3a ea       	ldi	r19, 0xAA	; 170
    1f9c:	4a ea       	ldi	r20, 0xAA	; 170
    1f9e:	50 e4       	ldi	r21, 0x40	; 64
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	f8 01       	movw	r30, r16
    1faa:	80 83       	st	Z, r24
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	a2 83       	std	Z+2, r26	; 0x02
    1fb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ef 58       	subi	r30, 0x8F	; 143
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	34 f4       	brge	.+12     	; 0x1fdc <CLCD_voidInit+0x82c>
		__ticks = 1;
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e0 59       	subi	r30, 0x90	; 144
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	80 83       	st	Z, r24
    1fda:	e0 c0       	rjmp	.+448    	; 0x219c <CLCD_voidInit+0x9ec>
	else if (__tmp > 255)
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ef 58       	subi	r30, 0x8F	; 143
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	0c f0       	brlt	.+2      	; 0x1ffc <CLCD_voidInit+0x84c>
    1ffa:	c0 c0       	rjmp	.+384    	; 0x217c <CLCD_voidInit+0x9cc>
	{
		_delay_ms(__us / 1000.0);
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	eb 58       	subi	r30, 0x8B	; 139
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a e7       	ldi	r20, 0x7A	; 122
    2010:	54 e4       	ldi	r21, 0x44	; 68
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	fe 01       	movw	r30, r28
    201c:	e4 59       	subi	r30, 0x94	; 148
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	8e 01       	movw	r16, r28
    202a:	08 59       	subi	r16, 0x98	; 152
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	fe 01       	movw	r30, r28
    2030:	e4 59       	subi	r30, 0x94	; 148
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	55 e4       	ldi	r21, 0x45	; 69
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	f8 01       	movw	r30, r16
    204e:	80 83       	st	Z, r24
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	a2 83       	std	Z+2, r26	; 0x02
    2054:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2056:	fe 01       	movw	r30, r28
    2058:	e8 59       	subi	r30, 0x98	; 152
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	44 f4       	brge	.+16     	; 0x2084 <CLCD_voidInit+0x8d4>
		__ticks = 1;
    2074:	fe 01       	movw	r30, r28
    2076:	ea 59       	subi	r30, 0x9A	; 154
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	64 c0       	rjmp	.+200    	; 0x214c <CLCD_voidInit+0x99c>
	else if (__tmp > 65535)
    2084:	fe 01       	movw	r30, r28
    2086:	e8 59       	subi	r30, 0x98	; 152
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	0c f0       	brlt	.+2      	; 0x20a4 <CLCD_voidInit+0x8f4>
    20a2:	43 c0       	rjmp	.+134    	; 0x212a <CLCD_voidInit+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	fe 01       	movw	r30, r28
    20a6:	e4 59       	subi	r30, 0x94	; 148
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8e 01       	movw	r16, r28
    20c4:	0a 59       	subi	r16, 0x9A	; 154
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	f8 01       	movw	r30, r16
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
    20da:	1f c0       	rjmp	.+62     	; 0x211a <CLCD_voidInit+0x96a>
    20dc:	fe 01       	movw	r30, r28
    20de:	ec 59       	subi	r30, 0x9C	; 156
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 e9       	ldi	r24, 0x90	; 144
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ea:	fe 01       	movw	r30, r28
    20ec:	ec 59       	subi	r30, 0x9C	; 156
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <CLCD_voidInit+0x944>
    20f8:	fe 01       	movw	r30, r28
    20fa:	ec 59       	subi	r30, 0x9C	; 156
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	de 01       	movw	r26, r28
    2104:	aa 59       	subi	r26, 0x9A	; 154
    2106:	bf 4f       	sbci	r27, 0xFF	; 255
    2108:	fe 01       	movw	r30, r28
    210a:	ea 59       	subi	r30, 0x9A	; 154
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	11 96       	adiw	r26, 0x01	; 1
    2116:	9c 93       	st	X, r25
    2118:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	fe 01       	movw	r30, r28
    211c:	ea 59       	subi	r30, 0x9A	; 154
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	d1 f6       	brne	.-76     	; 0x20dc <CLCD_voidInit+0x92c>
    2128:	4b c0       	rjmp	.+150    	; 0x21c0 <CLCD_voidInit+0xa10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	8e 01       	movw	r16, r28
    212c:	0a 59       	subi	r16, 0x9A	; 154
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	fe 01       	movw	r30, r28
    2132:	e8 59       	subi	r30, 0x98	; 152
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	f8 01       	movw	r30, r16
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
    214c:	de 01       	movw	r26, r28
    214e:	ae 59       	subi	r26, 0x9E	; 158
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	ea 59       	subi	r30, 0x9A	; 154
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	9c 93       	st	X, r25
    2160:	8e 93       	st	-X, r24
    2162:	fe 01       	movw	r30, r28
    2164:	ee 59       	subi	r30, 0x9E	; 158
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <CLCD_voidInit+0x9bc>
    2170:	fe 01       	movw	r30, r28
    2172:	ee 59       	subi	r30, 0x9E	; 158
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	22 c0       	rjmp	.+68     	; 0x21c0 <CLCD_voidInit+0xa10>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    217c:	8e 01       	movw	r16, r28
    217e:	00 59       	subi	r16, 0x90	; 144
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	ef 58       	subi	r30, 0x8F	; 143
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	f8 01       	movw	r30, r16
    219a:	80 83       	st	Z, r24
    219c:	de 01       	movw	r26, r28
    219e:	af 59       	subi	r26, 0x9F	; 159
    21a0:	bf 4f       	sbci	r27, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	e0 59       	subi	r30, 0x90	; 144
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 59       	subi	r30, 0x9F	; 159
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	8a 95       	dec	r24
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <CLCD_voidInit+0xa04>
    21b8:	fe 01       	movw	r30, r28
    21ba:	ef 59       	subi	r30, 0x9F	; 159
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x02);
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    21c6:	fe 01       	movw	r30, r28
    21c8:	e3 5a       	subi	r30, 0xA3	; 163
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a6 e1       	ldi	r26, 0x16	; 22
    21d2:	b3 e4       	ldi	r27, 0x43	; 67
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	a2 83       	std	Z+2, r26	; 0x02
    21da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21dc:	8e 01       	movw	r16, r28
    21de:	07 5a       	subi	r16, 0xA7	; 167
    21e0:	1f 4f       	sbci	r17, 0xFF	; 255
    21e2:	fe 01       	movw	r30, r28
    21e4:	e3 5a       	subi	r30, 0xA3	; 163
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	2b ea       	ldi	r18, 0xAB	; 171
    21f2:	3a ea       	ldi	r19, 0xAA	; 170
    21f4:	4a ea       	ldi	r20, 0xAA	; 170
    21f6:	50 e4       	ldi	r21, 0x40	; 64
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	f8 01       	movw	r30, r16
    2202:	80 83       	st	Z, r24
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	a2 83       	std	Z+2, r26	; 0x02
    2208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    220a:	fe 01       	movw	r30, r28
    220c:	e7 5a       	subi	r30, 0xA7	; 167
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	34 f4       	brge	.+12     	; 0x2234 <CLCD_voidInit+0xa84>
		__ticks = 1;
    2228:	fe 01       	movw	r30, r28
    222a:	e8 5a       	subi	r30, 0xA8	; 168
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	80 83       	st	Z, r24
    2232:	e0 c0       	rjmp	.+448    	; 0x23f4 <CLCD_voidInit+0xc44>
	else if (__tmp > 255)
    2234:	fe 01       	movw	r30, r28
    2236:	e7 5a       	subi	r30, 0xA7	; 167
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	53 e4       	ldi	r21, 0x43	; 67
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	0c f0       	brlt	.+2      	; 0x2254 <CLCD_voidInit+0xaa4>
    2252:	c0 c0       	rjmp	.+384    	; 0x23d4 <CLCD_voidInit+0xc24>
	{
		_delay_ms(__us / 1000.0);
    2254:	fe 01       	movw	r30, r28
    2256:	e3 5a       	subi	r30, 0xA3	; 163
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	54 e4       	ldi	r21, 0x44	; 68
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	fe 01       	movw	r30, r28
    2274:	ec 5a       	subi	r30, 0xAC	; 172
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 83       	st	Z, r24
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	a2 83       	std	Z+2, r26	; 0x02
    227e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	8e 01       	movw	r16, r28
    2282:	00 5b       	subi	r16, 0xB0	; 176
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	fe 01       	movw	r30, r28
    2288:	ec 5a       	subi	r30, 0xAC	; 172
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a e7       	ldi	r20, 0x7A	; 122
    229a:	55 e4       	ldi	r21, 0x45	; 69
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	f8 01       	movw	r30, r16
    22a6:	80 83       	st	Z, r24
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	a2 83       	std	Z+2, r26	; 0x02
    22ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ae:	fe 01       	movw	r30, r28
    22b0:	e0 5b       	subi	r30, 0xB0	; 176
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c8:	88 23       	and	r24, r24
    22ca:	44 f4       	brge	.+16     	; 0x22dc <CLCD_voidInit+0xb2c>
		__ticks = 1;
    22cc:	fe 01       	movw	r30, r28
    22ce:	e2 5b       	subi	r30, 0xB2	; 178
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	64 c0       	rjmp	.+200    	; 0x23a4 <CLCD_voidInit+0xbf4>
	else if (__tmp > 65535)
    22dc:	fe 01       	movw	r30, r28
    22de:	e0 5b       	subi	r30, 0xB0	; 176
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	0c f0       	brlt	.+2      	; 0x22fc <CLCD_voidInit+0xb4c>
    22fa:	43 c0       	rjmp	.+134    	; 0x2382 <CLCD_voidInit+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	fe 01       	movw	r30, r28
    22fe:	ec 5a       	subi	r30, 0xAC	; 172
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8e 01       	movw	r16, r28
    231c:	02 5b       	subi	r16, 0xB2	; 178
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	1f c0       	rjmp	.+62     	; 0x2372 <CLCD_voidInit+0xbc2>
    2334:	fe 01       	movw	r30, r28
    2336:	e4 5b       	subi	r30, 0xB4	; 180
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 e9       	ldi	r24, 0x90	; 144
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2342:	fe 01       	movw	r30, r28
    2344:	e4 5b       	subi	r30, 0xB4	; 180
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <CLCD_voidInit+0xb9c>
    2350:	fe 01       	movw	r30, r28
    2352:	e4 5b       	subi	r30, 0xB4	; 180
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235a:	de 01       	movw	r26, r28
    235c:	a2 5b       	subi	r26, 0xB2	; 178
    235e:	bf 4f       	sbci	r27, 0xFF	; 255
    2360:	fe 01       	movw	r30, r28
    2362:	e2 5b       	subi	r30, 0xB2	; 178
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 81       	ld	r24, Z
    2368:	91 81       	ldd	r25, Z+1	; 0x01
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	11 96       	adiw	r26, 0x01	; 1
    236e:	9c 93       	st	X, r25
    2370:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	fe 01       	movw	r30, r28
    2374:	e2 5b       	subi	r30, 0xB2	; 178
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	91 81       	ldd	r25, Z+1	; 0x01
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	d1 f6       	brne	.-76     	; 0x2334 <CLCD_voidInit+0xb84>
    2380:	4b c0       	rjmp	.+150    	; 0x2418 <CLCD_voidInit+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	8e 01       	movw	r16, r28
    2384:	02 5b       	subi	r16, 0xB2	; 178
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	fe 01       	movw	r30, r28
    238a:	e0 5b       	subi	r30, 0xB0	; 176
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	f8 01       	movw	r30, r16
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	de 01       	movw	r26, r28
    23a6:	a6 5b       	subi	r26, 0xB6	; 182
    23a8:	bf 4f       	sbci	r27, 0xFF	; 255
    23aa:	fe 01       	movw	r30, r28
    23ac:	e2 5b       	subi	r30, 0xB2	; 178
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 81       	ld	r24, Z
    23b2:	91 81       	ldd	r25, Z+1	; 0x01
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
    23ba:	fe 01       	movw	r30, r28
    23bc:	e6 5b       	subi	r30, 0xB6	; 182
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <CLCD_voidInit+0xc14>
    23c8:	fe 01       	movw	r30, r28
    23ca:	e6 5b       	subi	r30, 0xB6	; 182
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
    23d2:	22 c0       	rjmp	.+68     	; 0x2418 <CLCD_voidInit+0xc68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23d4:	8e 01       	movw	r16, r28
    23d6:	08 5a       	subi	r16, 0xA8	; 168
    23d8:	1f 4f       	sbci	r17, 0xFF	; 255
    23da:	fe 01       	movw	r30, r28
    23dc:	e7 5a       	subi	r30, 0xA7	; 167
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	f8 01       	movw	r30, r16
    23f2:	80 83       	st	Z, r24
    23f4:	de 01       	movw	r26, r28
    23f6:	a7 5b       	subi	r26, 0xB7	; 183
    23f8:	bf 4f       	sbci	r27, 0xFF	; 255
    23fa:	fe 01       	movw	r30, r28
    23fc:	e8 5a       	subi	r30, 0xA8	; 168
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2404:	fe 01       	movw	r30, r28
    2406:	e7 5b       	subi	r30, 0xB7	; 183
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	8a 95       	dec	r24
    240e:	f1 f7       	brne	.-4      	; 0x240c <CLCD_voidInit+0xc5c>
    2410:	fe 01       	movw	r30, r28
    2412:	e7 5b       	subi	r30, 0xB7	; 183
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x06);
    2418:	86 e0       	ldi	r24, 0x06	; 6
    241a:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    241e:	fe 01       	movw	r30, r28
    2420:	eb 5b       	subi	r30, 0xBB	; 187
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a6 e1       	ldi	r26, 0x16	; 22
    242a:	b3 e4       	ldi	r27, 0x43	; 67
    242c:	80 83       	st	Z, r24
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	a2 83       	std	Z+2, r26	; 0x02
    2432:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2434:	8e 01       	movw	r16, r28
    2436:	0f 5b       	subi	r16, 0xBF	; 191
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	eb 5b       	subi	r30, 0xBB	; 187
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	2b ea       	ldi	r18, 0xAB	; 171
    244a:	3a ea       	ldi	r19, 0xAA	; 170
    244c:	4a ea       	ldi	r20, 0xAA	; 170
    244e:	50 e4       	ldi	r21, 0x40	; 64
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	f8 01       	movw	r30, r16
    245a:	80 83       	st	Z, r24
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	a2 83       	std	Z+2, r26	; 0x02
    2460:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2462:	fe 01       	movw	r30, r28
    2464:	ef 5b       	subi	r30, 0xBF	; 191
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	34 f4       	brge	.+12     	; 0x248c <CLCD_voidInit+0xcdc>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	fe 01       	movw	r30, r28
    2484:	e0 5c       	subi	r30, 0xC0	; 192
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 83       	st	Z, r24
    248a:	9d c0       	rjmp	.+314    	; 0x25c6 <CLCD_voidInit+0xe16>
	else if (__tmp > 255)
    248c:	fe 01       	movw	r30, r28
    248e:	ef 5b       	subi	r30, 0xBF	; 191
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	53 e4       	ldi	r21, 0x43	; 67
    24a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	0c f0       	brlt	.+2      	; 0x24ac <CLCD_voidInit+0xcfc>
    24aa:	7e c0       	rjmp	.+252    	; 0x25a8 <CLCD_voidInit+0xdf8>
	{
		_delay_ms(__us / 1000.0);
    24ac:	fe 01       	movw	r30, r28
    24ae:	eb 5b       	subi	r30, 0xBB	; 187
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a e7       	ldi	r20, 0x7A	; 122
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8c af       	std	Y+60, r24	; 0x3c
    24cc:	9d af       	std	Y+61, r25	; 0x3d
    24ce:	ae af       	std	Y+62, r26	; 0x3e
    24d0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    24d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    24d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    24d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a e7       	ldi	r20, 0x7A	; 122
    24e0:	55 e4       	ldi	r21, 0x45	; 69
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	88 af       	std	Y+56, r24	; 0x38
    24ec:	99 af       	std	Y+57, r25	; 0x39
    24ee:	aa af       	std	Y+58, r26	; 0x3a
    24f0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    24f2:	68 ad       	ldd	r22, Y+56	; 0x38
    24f4:	79 ad       	ldd	r23, Y+57	; 0x39
    24f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    24f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <CLCD_voidInit+0xd64>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9f ab       	std	Y+55, r25	; 0x37
    2510:	8e ab       	std	Y+54, r24	; 0x36
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <CLCD_voidInit+0xde2>
	else if (__tmp > 65535)
    2514:	68 ad       	ldd	r22, Y+56	; 0x38
    2516:	79 ad       	ldd	r23, Y+57	; 0x39
    2518:	8a ad       	ldd	r24, Y+58	; 0x3a
    251a:	9b ad       	ldd	r25, Y+59	; 0x3b
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <CLCD_voidInit+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	6c ad       	ldd	r22, Y+60	; 0x3c
    252e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2530:	8e ad       	ldd	r24, Y+62	; 0x3e
    2532:	9f ad       	ldd	r25, Y+63	; 0x3f
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9f ab       	std	Y+55, r25	; 0x37
    2552:	8e ab       	std	Y+54, r24	; 0x36
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <CLCD_voidInit+0xdc4>
    2556:	80 e9       	ldi	r24, 0x90	; 144
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	9d ab       	std	Y+53, r25	; 0x35
    255c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    255e:	8c a9       	ldd	r24, Y+52	; 0x34
    2560:	9d a9       	ldd	r25, Y+53	; 0x35
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <CLCD_voidInit+0xdb2>
    2566:	9d ab       	std	Y+53, r25	; 0x35
    2568:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	8e a9       	ldd	r24, Y+54	; 0x36
    256c:	9f a9       	ldd	r25, Y+55	; 0x37
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	9f ab       	std	Y+55, r25	; 0x37
    2572:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	8e a9       	ldd	r24, Y+54	; 0x36
    2576:	9f a9       	ldd	r25, Y+55	; 0x37
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <CLCD_voidInit+0xda6>
    257c:	2d c0       	rjmp	.+90     	; 0x25d8 <CLCD_voidInit+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	68 ad       	ldd	r22, Y+56	; 0x38
    2580:	79 ad       	ldd	r23, Y+57	; 0x39
    2582:	8a ad       	ldd	r24, Y+58	; 0x3a
    2584:	9b ad       	ldd	r25, Y+59	; 0x3b
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9f ab       	std	Y+55, r25	; 0x37
    2590:	8e ab       	std	Y+54, r24	; 0x36
    2592:	8e a9       	ldd	r24, Y+54	; 0x36
    2594:	9f a9       	ldd	r25, Y+55	; 0x37
    2596:	9b ab       	std	Y+51, r25	; 0x33
    2598:	8a ab       	std	Y+50, r24	; 0x32
    259a:	8a a9       	ldd	r24, Y+50	; 0x32
    259c:	9b a9       	ldd	r25, Y+51	; 0x33
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <CLCD_voidInit+0xdee>
    25a2:	9b ab       	std	Y+51, r25	; 0x33
    25a4:	8a ab       	std	Y+50, r24	; 0x32
    25a6:	18 c0       	rjmp	.+48     	; 0x25d8 <CLCD_voidInit+0xe28>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 5b       	subi	r30, 0xBF	; 191
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	fe 01       	movw	r30, r28
    25c0:	e0 5c       	subi	r30, 0xC0	; 192
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 83       	st	Z, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	e0 5c       	subi	r30, 0xC0	; 192
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25d0:	89 a9       	ldd	r24, Y+49	; 0x31
    25d2:	8a 95       	dec	r24
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <CLCD_voidInit+0xe22>
    25d6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(150);
	CLCD_voidSendCommand(0x0d);
    25d8:	8d e0       	ldi	r24, 0x0D	; 13
    25da:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a6 e1       	ldi	r26, 0x16	; 22
    25e4:	b3 e4       	ldi	r27, 0x43	; 67
    25e6:	8d a7       	std	Y+45, r24	; 0x2d
    25e8:	9e a7       	std	Y+46, r25	; 0x2e
    25ea:	af a7       	std	Y+47, r26	; 0x2f
    25ec:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    25f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    25f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f4:	98 a9       	ldd	r25, Y+48	; 0x30
    25f6:	2b ea       	ldi	r18, 0xAB	; 171
    25f8:	3a ea       	ldi	r19, 0xAA	; 170
    25fa:	4a ea       	ldi	r20, 0xAA	; 170
    25fc:	50 e4       	ldi	r21, 0x40	; 64
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	89 a7       	std	Y+41, r24	; 0x29
    2608:	9a a7       	std	Y+42, r25	; 0x2a
    260a:	ab a7       	std	Y+43, r26	; 0x2b
    260c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    260e:	69 a5       	ldd	r22, Y+41	; 0x29
    2610:	7a a5       	ldd	r23, Y+42	; 0x2a
    2612:	8b a5       	ldd	r24, Y+43	; 0x2b
    2614:	9c a5       	ldd	r25, Y+44	; 0x2c
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	1c f4       	brge	.+6      	; 0x262c <CLCD_voidInit+0xe7c>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	88 a7       	std	Y+40, r24	; 0x28
    262a:	91 c0       	rjmp	.+290    	; 0x274e <CLCD_voidInit+0xf9e>
	else if (__tmp > 255)
    262c:	69 a5       	ldd	r22, Y+41	; 0x29
    262e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2630:	8b a5       	ldd	r24, Y+43	; 0x2b
    2632:	9c a5       	ldd	r25, Y+44	; 0x2c
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	53 e4       	ldi	r21, 0x43	; 67
    263c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2640:	18 16       	cp	r1, r24
    2642:	0c f0       	brlt	.+2      	; 0x2646 <CLCD_voidInit+0xe96>
    2644:	7b c0       	rjmp	.+246    	; 0x273c <CLCD_voidInit+0xf8c>
	{
		_delay_ms(__us / 1000.0);
    2646:	6d a5       	ldd	r22, Y+45	; 0x2d
    2648:	7e a5       	ldd	r23, Y+46	; 0x2e
    264a:	8f a5       	ldd	r24, Y+47	; 0x2f
    264c:	98 a9       	ldd	r25, Y+48	; 0x30
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a e7       	ldi	r20, 0x7A	; 122
    2654:	54 e4       	ldi	r21, 0x44	; 68
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8c a3       	std	Y+36, r24	; 0x24
    2660:	9d a3       	std	Y+37, r25	; 0x25
    2662:	ae a3       	std	Y+38, r26	; 0x26
    2664:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	6c a1       	ldd	r22, Y+36	; 0x24
    2668:	7d a1       	ldd	r23, Y+37	; 0x25
    266a:	8e a1       	ldd	r24, Y+38	; 0x26
    266c:	9f a1       	ldd	r25, Y+39	; 0x27
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a e7       	ldi	r20, 0x7A	; 122
    2674:	55 e4       	ldi	r21, 0x45	; 69
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	88 a3       	std	Y+32, r24	; 0x20
    2680:	99 a3       	std	Y+33, r25	; 0x21
    2682:	aa a3       	std	Y+34, r26	; 0x22
    2684:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2686:	68 a1       	ldd	r22, Y+32	; 0x20
    2688:	79 a1       	ldd	r23, Y+33	; 0x21
    268a:	8a a1       	ldd	r24, Y+34	; 0x22
    268c:	9b a1       	ldd	r25, Y+35	; 0x23
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <CLCD_voidInit+0xef8>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9f 8f       	std	Y+31, r25	; 0x1f
    26a4:	8e 8f       	std	Y+30, r24	; 0x1e
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <CLCD_voidInit+0xf76>
	else if (__tmp > 65535)
    26a8:	68 a1       	ldd	r22, Y+32	; 0x20
    26aa:	79 a1       	ldd	r23, Y+33	; 0x21
    26ac:	8a a1       	ldd	r24, Y+34	; 0x22
    26ae:	9b a1       	ldd	r25, Y+35	; 0x23
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	4c f5       	brge	.+82     	; 0x2712 <CLCD_voidInit+0xf62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	6c a1       	ldd	r22, Y+36	; 0x24
    26c2:	7d a1       	ldd	r23, Y+37	; 0x25
    26c4:	8e a1       	ldd	r24, Y+38	; 0x26
    26c6:	9f a1       	ldd	r25, Y+39	; 0x27
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9f 8f       	std	Y+31, r25	; 0x1f
    26e6:	8e 8f       	std	Y+30, r24	; 0x1e
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <CLCD_voidInit+0xf58>
    26ea:	80 e9       	ldi	r24, 0x90	; 144
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	9d 8f       	std	Y+29, r25	; 0x1d
    26f0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <CLCD_voidInit+0xf46>
    26fa:	9d 8f       	std	Y+29, r25	; 0x1d
    26fc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2700:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	9f 8f       	std	Y+31, r25	; 0x1f
    2706:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	8e 8d       	ldd	r24, Y+30	; 0x1e
    270a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f7       	brne	.-38     	; 0x26ea <CLCD_voidInit+0xf3a>
    2710:	24 c0       	rjmp	.+72     	; 0x275a <CLCD_voidInit+0xfaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	68 a1       	ldd	r22, Y+32	; 0x20
    2714:	79 a1       	ldd	r23, Y+33	; 0x21
    2716:	8a a1       	ldd	r24, Y+34	; 0x22
    2718:	9b a1       	ldd	r25, Y+35	; 0x23
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9f 8f       	std	Y+31, r25	; 0x1f
    2724:	8e 8f       	std	Y+30, r24	; 0x1e
    2726:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2728:	9f 8d       	ldd	r25, Y+31	; 0x1f
    272a:	9b 8f       	std	Y+27, r25	; 0x1b
    272c:	8a 8f       	std	Y+26, r24	; 0x1a
    272e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2730:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <CLCD_voidInit+0xf82>
    2736:	9b 8f       	std	Y+27, r25	; 0x1b
    2738:	8a 8f       	std	Y+26, r24	; 0x1a
    273a:	0f c0       	rjmp	.+30     	; 0x275a <CLCD_voidInit+0xfaa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    273c:	69 a5       	ldd	r22, Y+41	; 0x29
    273e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2740:	8b a5       	ldd	r24, Y+43	; 0x2b
    2742:	9c a5       	ldd	r25, Y+44	; 0x2c
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	88 a7       	std	Y+40, r24	; 0x28
    274e:	88 a5       	ldd	r24, Y+40	; 0x28
    2750:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2752:	89 8d       	ldd	r24, Y+25	; 0x19
    2754:	8a 95       	dec	r24
    2756:	f1 f7       	brne	.-4      	; 0x2754 <CLCD_voidInit+0xfa4>
    2758:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(150);
	CLCD_voidSendCommand(0x01);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a6 e1       	ldi	r26, 0x16	; 22
    2766:	b3 e4       	ldi	r27, 0x43	; 67
    2768:	8d 8b       	std	Y+21, r24	; 0x15
    276a:	9e 8b       	std	Y+22, r25	; 0x16
    276c:	af 8b       	std	Y+23, r26	; 0x17
    276e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2770:	6d 89       	ldd	r22, Y+21	; 0x15
    2772:	7e 89       	ldd	r23, Y+22	; 0x16
    2774:	8f 89       	ldd	r24, Y+23	; 0x17
    2776:	98 8d       	ldd	r25, Y+24	; 0x18
    2778:	2b ea       	ldi	r18, 0xAB	; 171
    277a:	3a ea       	ldi	r19, 0xAA	; 170
    277c:	4a ea       	ldi	r20, 0xAA	; 170
    277e:	50 e4       	ldi	r21, 0x40	; 64
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	89 8b       	std	Y+17, r24	; 0x11
    278a:	9a 8b       	std	Y+18, r25	; 0x12
    278c:	ab 8b       	std	Y+19, r26	; 0x13
    278e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2790:	69 89       	ldd	r22, Y+17	; 0x11
    2792:	7a 89       	ldd	r23, Y+18	; 0x12
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	1c f4       	brge	.+6      	; 0x27ae <CLCD_voidInit+0xffe>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	88 8b       	std	Y+16, r24	; 0x10
    27ac:	91 c0       	rjmp	.+290    	; 0x28d0 <CLCD_voidInit+0x1120>
	else if (__tmp > 255)
    27ae:	69 89       	ldd	r22, Y+17	; 0x11
    27b0:	7a 89       	ldd	r23, Y+18	; 0x12
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	53 e4       	ldi	r21, 0x43	; 67
    27be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <CLCD_voidInit+0x1018>
    27c6:	7b c0       	rjmp	.+246    	; 0x28be <CLCD_voidInit+0x110e>
	{
		_delay_ms(__us / 1000.0);
    27c8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ca:	7e 89       	ldd	r23, Y+22	; 0x16
    27cc:	8f 89       	ldd	r24, Y+23	; 0x17
    27ce:	98 8d       	ldd	r25, Y+24	; 0x18
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a e7       	ldi	r20, 0x7A	; 122
    27d6:	54 e4       	ldi	r21, 0x44	; 68
    27d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8c 87       	std	Y+12, r24	; 0x0c
    27e2:	9d 87       	std	Y+13, r25	; 0x0d
    27e4:	ae 87       	std	Y+14, r26	; 0x0e
    27e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a e7       	ldi	r20, 0x7A	; 122
    27f6:	55 e4       	ldi	r21, 0x45	; 69
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	88 87       	std	Y+8, r24	; 0x08
    2802:	99 87       	std	Y+9, r25	; 0x09
    2804:	aa 87       	std	Y+10, r26	; 0x0a
    2806:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2808:	68 85       	ldd	r22, Y+8	; 0x08
    280a:	79 85       	ldd	r23, Y+9	; 0x09
    280c:	8a 85       	ldd	r24, Y+10	; 0x0a
    280e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <CLCD_voidInit+0x107a>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9f 83       	std	Y+7, r25	; 0x07
    2826:	8e 83       	std	Y+6, r24	; 0x06
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <CLCD_voidInit+0x10f8>
	else if (__tmp > 65535)
    282a:	68 85       	ldd	r22, Y+8	; 0x08
    282c:	79 85       	ldd	r23, Y+9	; 0x09
    282e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2830:	9b 85       	ldd	r25, Y+11	; 0x0b
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <CLCD_voidInit+0x10e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6c 85       	ldd	r22, Y+12	; 0x0c
    2844:	7d 85       	ldd	r23, Y+13	; 0x0d
    2846:	8e 85       	ldd	r24, Y+14	; 0x0e
    2848:	9f 85       	ldd	r25, Y+15	; 0x0f
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9f 83       	std	Y+7, r25	; 0x07
    2868:	8e 83       	std	Y+6, r24	; 0x06
    286a:	0f c0       	rjmp	.+30     	; 0x288a <CLCD_voidInit+0x10da>
    286c:	80 e9       	ldi	r24, 0x90	; 144
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	9d 83       	std	Y+5, r25	; 0x05
    2872:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	9d 81       	ldd	r25, Y+5	; 0x05
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <CLCD_voidInit+0x10c8>
    287c:	9d 83       	std	Y+5, r25	; 0x05
    287e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8e 81       	ldd	r24, Y+6	; 0x06
    2882:	9f 81       	ldd	r25, Y+7	; 0x07
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9f 83       	std	Y+7, r25	; 0x07
    2888:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8e 81       	ldd	r24, Y+6	; 0x06
    288c:	9f 81       	ldd	r25, Y+7	; 0x07
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <CLCD_voidInit+0x10bc>
    2892:	24 c0       	rjmp	.+72     	; 0x28dc <CLCD_voidInit+0x112c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	68 85       	ldd	r22, Y+8	; 0x08
    2896:	79 85       	ldd	r23, Y+9	; 0x09
    2898:	8a 85       	ldd	r24, Y+10	; 0x0a
    289a:	9b 85       	ldd	r25, Y+11	; 0x0b
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9f 83       	std	Y+7, r25	; 0x07
    28a6:	8e 83       	std	Y+6, r24	; 0x06
    28a8:	8e 81       	ldd	r24, Y+6	; 0x06
    28aa:	9f 81       	ldd	r25, Y+7	; 0x07
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	9b 81       	ldd	r25, Y+3	; 0x03
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <CLCD_voidInit+0x1104>
    28b8:	9b 83       	std	Y+3, r25	; 0x03
    28ba:	8a 83       	std	Y+2, r24	; 0x02
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <CLCD_voidInit+0x112c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28be:	69 89       	ldd	r22, Y+17	; 0x11
    28c0:	7a 89       	ldd	r23, Y+18	; 0x12
    28c2:	8b 89       	ldd	r24, Y+19	; 0x13
    28c4:	9c 89       	ldd	r25, Y+20	; 0x14
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	88 8b       	std	Y+16, r24	; 0x10
    28d0:	88 89       	ldd	r24, Y+16	; 0x10
    28d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	8a 95       	dec	r24
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <CLCD_voidInit+0x1126>
    28da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
}
    28dc:	cc 53       	subi	r28, 0x3C	; 60
    28de:	df 4f       	sbci	r29, 0xFF	; 255
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	08 95       	ret

000028f4 <CLCD_voidSendString>:

void CLCD_voidSendString(u8 *pvString)
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <CLCD_voidSendString+0x6>
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	0a c0       	rjmp	.+20     	; 0x2918 <CLCD_voidSendString+0x24>
	while (*pvString !='\0')
	{
		CLCD_voidSendData(*pvString);
    2904:	e9 81       	ldd	r30, Y+1	; 0x01
    2906:	fa 81       	ldd	r31, Y+2	; 0x02
    2908:	80 81       	ld	r24, Z
    290a:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
		pvString++;
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
}

void CLCD_voidSendString(u8 *pvString)
{
	while (*pvString !='\0')
    2918:	e9 81       	ldd	r30, Y+1	; 0x01
    291a:	fa 81       	ldd	r31, Y+2	; 0x02
    291c:	80 81       	ld	r24, Z
    291e:	88 23       	and	r24, r24
    2920:	89 f7       	brne	.-30     	; 0x2904 <CLCD_voidSendString+0x10>
	{
		CLCD_voidSendData(*pvString);
		pvString++;
	}
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <CLCD_voidGoToPosition>:

void CLCD_voidGoToPosition (u8 CLCD_uRow, u8 CLCD_u8Col)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <CLCD_voidGoToPosition+0x6>
    2932:	00 d0       	rcall	.+0      	; 0x2934 <CLCD_voidGoToPosition+0x8>
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	6a 83       	std	Y+2, r22	; 0x02
	switch(CLCD_uRow)
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	3c 83       	std	Y+4, r19	; 0x04
    2944:	2b 83       	std	Y+3, r18	; 0x03
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	91 05       	cpc	r25, r1
    294e:	d1 f0       	breq	.+52     	; 0x2984 <CLCD_voidGoToPosition+0x58>
    2950:	2b 81       	ldd	r18, Y+3	; 0x03
    2952:	3c 81       	ldd	r19, Y+4	; 0x04
    2954:	22 30       	cpi	r18, 0x02	; 2
    2956:	31 05       	cpc	r19, r1
    2958:	2c f4       	brge	.+10     	; 0x2964 <CLCD_voidGoToPosition+0x38>
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	61 f0       	breq	.+24     	; 0x297a <CLCD_voidGoToPosition+0x4e>
    2962:	1e c0       	rjmp	.+60     	; 0x29a0 <CLCD_voidGoToPosition+0x74>
    2964:	2b 81       	ldd	r18, Y+3	; 0x03
    2966:	3c 81       	ldd	r19, Y+4	; 0x04
    2968:	22 30       	cpi	r18, 0x02	; 2
    296a:	31 05       	cpc	r19, r1
    296c:	81 f0       	breq	.+32     	; 0x298e <CLCD_voidGoToPosition+0x62>
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	83 30       	cpi	r24, 0x03	; 3
    2974:	91 05       	cpc	r25, r1
    2976:	81 f0       	breq	.+32     	; 0x2998 <CLCD_voidGoToPosition+0x6c>
    2978:	13 c0       	rjmp	.+38     	; 0x29a0 <CLCD_voidGoToPosition+0x74>
	{
	case 0:
		CLCD_voidSendCommand(0x80 + CLCD_u8Col);break;
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	80 58       	subi	r24, 0x80	; 128
    297e:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    2982:	0e c0       	rjmp	.+28     	; 0x29a0 <CLCD_voidGoToPosition+0x74>
	case 1:
		CLCD_voidSendCommand(0xC0 + CLCD_u8Col);break;
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	80 54       	subi	r24, 0x40	; 64
    2988:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    298c:	09 c0       	rjmp	.+18     	; 0x29a0 <CLCD_voidGoToPosition+0x74>
	case 2:
		CLCD_voidSendCommand(0x94 + CLCD_u8Col);break;
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	8c 56       	subi	r24, 0x6C	; 108
    2992:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    2996:	04 c0       	rjmp	.+8      	; 0x29a0 <CLCD_voidGoToPosition+0x74>
	case 3:
		CLCD_voidSendCommand(0xD4 + CLCD_u8Col);break;
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	8c 52       	subi	r24, 0x2C	; 44
    299c:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
	}
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar (u8 *pvPattern, u8 CLCD_u8BlockNum, u8 CLCD_u8x, u8 CLCD_u8y)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	27 97       	sbiw	r28, 0x07	; 7
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
    29c6:	6d 83       	std	Y+5, r22	; 0x05
    29c8:	4e 83       	std	Y+6, r20	; 0x06
    29ca:	2f 83       	std	Y+7, r18	; 0x07
	u8 CLCD_u8CGRAMAddress = 0, i = 0;
    29cc:	1a 82       	std	Y+2, r1	; 0x02
    29ce:	19 82       	std	Y+1, r1	; 0x01
	CLCD_u8CGRAMAddress = CLCD_u8BlockNum * 8;
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	88 0f       	add	r24, r24
    29e0:	99 1f       	adc	r25, r25
    29e2:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand (CLCD_u8CGRAMAddress+64);
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	80 5c       	subi	r24, 0xC0	; 192
    29e8:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
	for (i = 0; i < 8; i++)
    29ec:	19 82       	std	Y+1, r1	; 0x01
    29ee:	0e c0       	rjmp	.+28     	; 0x2a0c <CLCD_voidWriteSpecialChar+0x5e>
	{
		CLCD_voidSendData(pvPattern[i]);
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	fc 01       	movw	r30, r24
    29fc:	e2 0f       	add	r30, r18
    29fe:	f3 1f       	adc	r31, r19
    2a00:	80 81       	ld	r24, Z
    2a02:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
void CLCD_voidWriteSpecialChar (u8 *pvPattern, u8 CLCD_u8BlockNum, u8 CLCD_u8x, u8 CLCD_u8y)
{
	u8 CLCD_u8CGRAMAddress = 0, i = 0;
	CLCD_u8CGRAMAddress = CLCD_u8BlockNum * 8;
	CLCD_voidSendCommand (CLCD_u8CGRAMAddress+64);
	for (i = 0; i < 8; i++)
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	88 30       	cpi	r24, 0x08	; 8
    2a10:	78 f3       	brcs	.-34     	; 0x29f0 <CLCD_voidWriteSpecialChar+0x42>
	{
		CLCD_voidSendData(pvPattern[i]);
	}
	CLCD_voidGoToPosition(CLCD_u8x, CLCD_u8y);
    2a12:	8e 81       	ldd	r24, Y+6	; 0x06
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	0e 94 96 14 	call	0x292c	; 0x292c <CLCD_voidGoToPosition>
	CLCD_voidSendData(pvPattern);
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
}
    2a22:	27 96       	adiw	r28, 0x07	; 7
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <CLCD_voidSendNum>:

void CLCD_voidSendNum(u32 Num) // convert int to string
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	9e 87       	std	Y+14, r25	; 0x0e
    2a4a:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr[10], i = 0, j = 0;
    2a4c:	1a 82       	std	Y+2, r1	; 0x02
    2a4e:	19 82       	std	Y+1, r1	; 0x01
	if (Num == 0)
    2a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	11 f5       	brne	.+68     	; 0x2a9c <CLCD_voidSendNum+0x68>
	{
		CLCD_voidSendData('0');
    2a58:	80 e3       	ldi	r24, 0x30	; 48
    2a5a:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
    2a5e:	39 c0       	rjmp	.+114    	; 0x2ad2 <CLCD_voidSendNum+0x9e>
	}
	else
	{
		while(Num)
		{
			arr[i] = Num%10 + '0';
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	e8 2f       	mov	r30, r24
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	2a e0       	ldi	r18, 0x0A	; 10
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	b9 01       	movw	r22, r18
    2a70:	0e 94 08 20 	call	0x4010	; 0x4010 <__udivmodhi4>
    2a74:	28 2f       	mov	r18, r24
    2a76:	20 5d       	subi	r18, 0xD0	; 208
    2a78:	ce 01       	movw	r24, r28
    2a7a:	03 96       	adiw	r24, 0x03	; 3
    2a7c:	e8 0f       	add	r30, r24
    2a7e:	f9 1f       	adc	r31, r25
    2a80:	20 83       	st	Z, r18
			Num/=10;
    2a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a86:	2a e0       	ldi	r18, 0x0A	; 10
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	b9 01       	movw	r22, r18
    2a8c:	0e 94 08 20 	call	0x4010	; 0x4010 <__udivmodhi4>
    2a90:	cb 01       	movw	r24, r22
    2a92:	9e 87       	std	Y+14, r25	; 0x0e
    2a94:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Num)
    2a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	f1 f6       	brne	.-68     	; 0x2a60 <CLCD_voidSendNum+0x2c>
		{
			arr[i] = Num%10 + '0';
			Num/=10;
			i++;
		}
		for(j = i; j > 0; j--)
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	11 c0       	rjmp	.+34     	; 0x2acc <CLCD_voidSendNum+0x98>
		{
			CLCD_voidSendData(arr[j-1]);
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	21 50       	subi	r18, 0x01	; 1
    2ab4:	30 40       	sbci	r19, 0x00	; 0
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	03 96       	adiw	r24, 0x03	; 3
    2aba:	fc 01       	movw	r30, r24
    2abc:	e2 0f       	add	r30, r18
    2abe:	f3 1f       	adc	r31, r19
    2ac0:	80 81       	ld	r24, Z
    2ac2:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
		{
			arr[i] = Num%10 + '0';
			Num/=10;
			i++;
		}
		for(j = i; j > 0; j--)
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	81 50       	subi	r24, 0x01	; 1
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	88 23       	and	r24, r24
    2ad0:	61 f7       	brne	.-40     	; 0x2aaa <CLCD_voidSendNum+0x76>
		{
			CLCD_voidSendData(arr[j-1]);
		}
	}
}
    2ad2:	2e 96       	adiw	r28, 0x0e	; 14
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <CLCD_voidClear>:

void CLCD_voidClear()
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	2e 97       	sbiw	r28, 0x0e	; 14
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0X01);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	0e 94 47 07 	call	0xe8e	; 0xe8e <CLCD_voidSendCommand>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e4       	ldi	r27, 0x40	; 64
    2b06:	8b 87       	std	Y+11, r24	; 0x0b
    2b08:	9c 87       	std	Y+12, r25	; 0x0c
    2b0a:	ad 87       	std	Y+13, r26	; 0x0d
    2b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4a e7       	ldi	r20, 0x7A	; 122
    2b1c:	55 e4       	ldi	r21, 0x45	; 69
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8f 83       	std	Y+7, r24	; 0x07
    2b28:	98 87       	std	Y+8, r25	; 0x08
    2b2a:	a9 87       	std	Y+9, r26	; 0x09
    2b2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b30:	78 85       	ldd	r23, Y+8	; 0x08
    2b32:	89 85       	ldd	r24, Y+9	; 0x09
    2b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	2c f4       	brge	.+10     	; 0x2b50 <CLCD_voidClear+0x6c>
		__ticks = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	3f c0       	rjmp	.+126    	; 0x2bce <CLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2b50:	6f 81       	ldd	r22, Y+7	; 0x07
    2b52:	78 85       	ldd	r23, Y+8	; 0x08
    2b54:	89 85       	ldd	r24, Y+9	; 0x09
    2b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	4c f5       	brge	.+82     	; 0x2bba <CLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e2       	ldi	r20, 0x20	; 32
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <CLCD_voidClear+0xcc>
    2b92:	80 e9       	ldi	r24, 0x90	; 144
    2b94:	91 e0       	ldi	r25, 0x01	; 1
    2b96:	9c 83       	std	Y+4, r25	; 0x04
    2b98:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <CLCD_voidClear+0xba>
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	9e 83       	std	Y+6, r25	; 0x06
    2bae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <CLCD_voidClear+0xae>
    2bb8:	14 c0       	rjmp	.+40     	; 0x2be2 <CLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <CLCD_voidClear+0xf6>
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2be2:	2e 96       	adiw	r28, 0x0e	; 14
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <DIO_voidSetPinDirection>:


                         /*************** PIN APIS ***************/

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	27 97       	sbiw	r28, 0x07	; 7
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	6a 83       	std	Y+2, r22	; 0x02
    2c0c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	88 30       	cpi	r24, 0x08	; 8
    2c12:	08 f0       	brcs	.+2      	; 0x2c16 <DIO_voidSetPinDirection+0x22>
    2c14:	ea c0       	rjmp	.+468    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
	{
		if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <DIO_voidSetPinDirection+0x2a>
    2c1c:	6f c0       	rjmp	.+222    	; 0x2cfc <DIO_voidSetPinDirection+0x108>
			switch(copy_u8PortId)
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	3f 83       	std	Y+7, r19	; 0x07
    2c26:	2e 83       	std	Y+6, r18	; 0x06
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	81 30       	cpi	r24, 0x01	; 1
    2c2e:	91 05       	cpc	r25, r1
    2c30:	49 f1       	breq	.+82     	; 0x2c84 <DIO_voidSetPinDirection+0x90>
    2c32:	2e 81       	ldd	r18, Y+6	; 0x06
    2c34:	3f 81       	ldd	r19, Y+7	; 0x07
    2c36:	22 30       	cpi	r18, 0x02	; 2
    2c38:	31 05       	cpc	r19, r1
    2c3a:	2c f4       	brge	.+10     	; 0x2c46 <DIO_voidSetPinDirection+0x52>
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	61 f0       	breq	.+24     	; 0x2c5c <DIO_voidSetPinDirection+0x68>
    2c44:	d2 c0       	rjmp	.+420    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
    2c46:	2e 81       	ldd	r18, Y+6	; 0x06
    2c48:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4a:	22 30       	cpi	r18, 0x02	; 2
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	71 f1       	breq	.+92     	; 0x2cac <DIO_voidSetPinDirection+0xb8>
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	9f 81       	ldd	r25, Y+7	; 0x07
    2c54:	83 30       	cpi	r24, 0x03	; 3
    2c56:	91 05       	cpc	r25, r1
    2c58:	e9 f1       	breq	.+122    	; 0x2cd4 <DIO_voidSetPinDirection+0xe0>
    2c5a:	c7 c0       	rjmp	.+398    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:SET_BIT(DDRA,copy_u8PinId);break;
    2c5c:	aa e3       	ldi	r26, 0x3A	; 58
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	ea e3       	ldi	r30, 0x3A	; 58
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	48 2f       	mov	r20, r24
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	02 2e       	mov	r0, r18
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <DIO_voidSetPinDirection+0x86>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	0a 94       	dec	r0
    2c7c:	e2 f7       	brpl	.-8      	; 0x2c76 <DIO_voidSetPinDirection+0x82>
    2c7e:	84 2b       	or	r24, r20
    2c80:	8c 93       	st	X, r24
    2c82:	b3 c0       	rjmp	.+358    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:SET_BIT(DDRB,copy_u8PinId);break;
    2c84:	a7 e3       	ldi	r26, 0x37	; 55
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e7 e3       	ldi	r30, 0x37	; 55
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	48 2f       	mov	r20, r24
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 2e       	mov	r0, r18
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_voidSetPinDirection+0xae>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a 94       	dec	r0
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_voidSetPinDirection+0xaa>
    2ca6:	84 2b       	or	r24, r20
    2ca8:	8c 93       	st	X, r24
    2caa:	9f c0       	rjmp	.+318    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:SET_BIT(DDRC,copy_u8PinId);break;
    2cac:	a4 e3       	ldi	r26, 0x34	; 52
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e4 e3       	ldi	r30, 0x34	; 52
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	48 2f       	mov	r20, r24
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	02 2e       	mov	r0, r18
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <DIO_voidSetPinDirection+0xd6>
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	0a 94       	dec	r0
    2ccc:	e2 f7       	brpl	.-8      	; 0x2cc6 <DIO_voidSetPinDirection+0xd2>
    2cce:	84 2b       	or	r24, r20
    2cd0:	8c 93       	st	X, r24
    2cd2:	8b c0       	rjmp	.+278    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:SET_BIT(DDRD,copy_u8PinId);break;
    2cd4:	a1 e3       	ldi	r26, 0x31	; 49
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e1 e3       	ldi	r30, 0x31	; 49
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	48 2f       	mov	r20, r24
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	02 2e       	mov	r0, r18
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <DIO_voidSetPinDirection+0xfe>
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	0a 94       	dec	r0
    2cf4:	e2 f7       	brpl	.-8      	; 0x2cee <DIO_voidSetPinDirection+0xfa>
    2cf6:	84 2b       	or	r24, r20
    2cf8:	8c 93       	st	X, r24
    2cfa:	77 c0       	rjmp	.+238    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			}
		else if(copy_u8PinDirection == DIO_PIN_INPUT)
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	88 23       	and	r24, r24
    2d00:	09 f0       	breq	.+2      	; 0x2d04 <DIO_voidSetPinDirection+0x110>
    2d02:	73 c0       	rjmp	.+230    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			switch(copy_u8PortId)
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	3d 83       	std	Y+5, r19	; 0x05
    2d0c:	2c 83       	std	Y+4, r18	; 0x04
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	9d 81       	ldd	r25, Y+5	; 0x05
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	91 05       	cpc	r25, r1
    2d16:	59 f1       	breq	.+86     	; 0x2d6e <DIO_voidSetPinDirection+0x17a>
    2d18:	2c 81       	ldd	r18, Y+4	; 0x04
    2d1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d1c:	22 30       	cpi	r18, 0x02	; 2
    2d1e:	31 05       	cpc	r19, r1
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <DIO_voidSetPinDirection+0x138>
    2d22:	8c 81       	ldd	r24, Y+4	; 0x04
    2d24:	9d 81       	ldd	r25, Y+5	; 0x05
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f0       	breq	.+26     	; 0x2d44 <DIO_voidSetPinDirection+0x150>
    2d2a:	5f c0       	rjmp	.+190    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
    2d2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d30:	22 30       	cpi	r18, 0x02	; 2
    2d32:	31 05       	cpc	r19, r1
    2d34:	89 f1       	breq	.+98     	; 0x2d98 <DIO_voidSetPinDirection+0x1a4>
    2d36:	8c 81       	ldd	r24, Y+4	; 0x04
    2d38:	9d 81       	ldd	r25, Y+5	; 0x05
    2d3a:	83 30       	cpi	r24, 0x03	; 3
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <DIO_voidSetPinDirection+0x14e>
    2d40:	40 c0       	rjmp	.+128    	; 0x2dc2 <DIO_voidSetPinDirection+0x1ce>
    2d42:	53 c0       	rjmp	.+166    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:CLR_BIT(DDRA,copy_u8PinId);break;
    2d44:	aa e3       	ldi	r26, 0x3A	; 58
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	ea e3       	ldi	r30, 0x3A	; 58
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	48 2f       	mov	r20, r24
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	02 2e       	mov	r0, r18
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <DIO_voidSetPinDirection+0x16e>
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	0a 94       	dec	r0
    2d64:	e2 f7       	brpl	.-8      	; 0x2d5e <DIO_voidSetPinDirection+0x16a>
    2d66:	80 95       	com	r24
    2d68:	84 23       	and	r24, r20
    2d6a:	8c 93       	st	X, r24
    2d6c:	3e c0       	rjmp	.+124    	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:CLR_BIT(DDRB,copy_u8PinId);break;
    2d6e:	a7 e3       	ldi	r26, 0x37	; 55
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e7 e3       	ldi	r30, 0x37	; 55
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	48 2f       	mov	r20, r24
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	02 2e       	mov	r0, r18
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <DIO_voidSetPinDirection+0x198>
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	0a 94       	dec	r0
    2d8e:	e2 f7       	brpl	.-8      	; 0x2d88 <DIO_voidSetPinDirection+0x194>
    2d90:	80 95       	com	r24
    2d92:	84 23       	and	r24, r20
    2d94:	8c 93       	st	X, r24
    2d96:	29 c0       	rjmp	.+82     	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:CLR_BIT(DDRC,copy_u8PinId);break;
    2d98:	a4 e3       	ldi	r26, 0x34	; 52
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e4 e3       	ldi	r30, 0x34	; 52
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	48 2f       	mov	r20, r24
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	02 2e       	mov	r0, r18
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <DIO_voidSetPinDirection+0x1c2>
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	0a 94       	dec	r0
    2db8:	e2 f7       	brpl	.-8      	; 0x2db2 <DIO_voidSetPinDirection+0x1be>
    2dba:	80 95       	com	r24
    2dbc:	84 23       	and	r24, r20
    2dbe:	8c 93       	st	X, r24
    2dc0:	14 c0       	rjmp	.+40     	; 0x2dea <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:CLR_BIT(DDRD,copy_u8PinId);break;
    2dc2:	a1 e3       	ldi	r26, 0x31	; 49
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e1 e3       	ldi	r30, 0x31	; 49
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	48 2f       	mov	r20, r24
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	02 2e       	mov	r0, r18
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <DIO_voidSetPinDirection+0x1ec>
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	0a 94       	dec	r0
    2de2:	e2 f7       	brpl	.-8      	; 0x2ddc <DIO_voidSetPinDirection+0x1e8>
    2de4:	80 95       	com	r24
    2de6:	84 23       	and	r24, r20
    2de8:	8c 93       	st	X, r24
			}
	}

}
    2dea:	27 96       	adiw	r28, 0x07	; 7
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	27 97       	sbiw	r28, 0x07	; 7
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	6a 83       	std	Y+2, r22	; 0x02
    2e14:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	88 30       	cpi	r24, 0x08	; 8
    2e1a:	08 f0       	brcs	.+2      	; 0x2e1e <DIO_voidSetPinValue+0x22>
    2e1c:	ee c0       	rjmp	.+476    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
	{
		if(copy_u8PinValue == DIO_PIN_HIGH)
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <DIO_voidSetPinValue+0x2a>
    2e24:	6f c0       	rjmp	.+222    	; 0x2f04 <DIO_voidSetPinValue+0x108>
		{
			switch(copy_u8PortId)
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	3f 83       	std	Y+7, r19	; 0x07
    2e2e:	2e 83       	std	Y+6, r18	; 0x06
    2e30:	8e 81       	ldd	r24, Y+6	; 0x06
    2e32:	9f 81       	ldd	r25, Y+7	; 0x07
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	91 05       	cpc	r25, r1
    2e38:	49 f1       	breq	.+82     	; 0x2e8c <DIO_voidSetPinValue+0x90>
    2e3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e3e:	22 30       	cpi	r18, 0x02	; 2
    2e40:	31 05       	cpc	r19, r1
    2e42:	2c f4       	brge	.+10     	; 0x2e4e <DIO_voidSetPinValue+0x52>
    2e44:	8e 81       	ldd	r24, Y+6	; 0x06
    2e46:	9f 81       	ldd	r25, Y+7	; 0x07
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	61 f0       	breq	.+24     	; 0x2e64 <DIO_voidSetPinValue+0x68>
    2e4c:	d6 c0       	rjmp	.+428    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
    2e4e:	2e 81       	ldd	r18, Y+6	; 0x06
    2e50:	3f 81       	ldd	r19, Y+7	; 0x07
    2e52:	22 30       	cpi	r18, 0x02	; 2
    2e54:	31 05       	cpc	r19, r1
    2e56:	71 f1       	breq	.+92     	; 0x2eb4 <DIO_voidSetPinValue+0xb8>
    2e58:	8e 81       	ldd	r24, Y+6	; 0x06
    2e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5c:	83 30       	cpi	r24, 0x03	; 3
    2e5e:	91 05       	cpc	r25, r1
    2e60:	e9 f1       	breq	.+122    	; 0x2edc <DIO_voidSetPinValue+0xe0>
    2e62:	cb c0       	rjmp	.+406    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA:SET_BIT(PORTA,copy_u8PinId);break;
    2e64:	ab e3       	ldi	r26, 0x3B	; 59
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	eb e3       	ldi	r30, 0x3B	; 59
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	48 2f       	mov	r20, r24
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	02 2e       	mov	r0, r18
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <DIO_voidSetPinValue+0x86>
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	0a 94       	dec	r0
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <DIO_voidSetPinValue+0x82>
    2e86:	84 2b       	or	r24, r20
    2e88:	8c 93       	st	X, r24
    2e8a:	b7 c0       	rjmp	.+366    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTB:SET_BIT(PORTB,copy_u8PinId);break;
    2e8c:	a8 e3       	ldi	r26, 0x38	; 56
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e8 e3       	ldi	r30, 0x38	; 56
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	48 2f       	mov	r20, r24
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	02 2e       	mov	r0, r18
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <DIO_voidSetPinValue+0xae>
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	0a 94       	dec	r0
    2eac:	e2 f7       	brpl	.-8      	; 0x2ea6 <DIO_voidSetPinValue+0xaa>
    2eae:	84 2b       	or	r24, r20
    2eb0:	8c 93       	st	X, r24
    2eb2:	a3 c0       	rjmp	.+326    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTC:SET_BIT(PORTC,copy_u8PinId);break;
    2eb4:	a5 e3       	ldi	r26, 0x35	; 53
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e5 e3       	ldi	r30, 0x35	; 53
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	48 2f       	mov	r20, r24
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	02 2e       	mov	r0, r18
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <DIO_voidSetPinValue+0xd6>
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	0a 94       	dec	r0
    2ed4:	e2 f7       	brpl	.-8      	; 0x2ece <DIO_voidSetPinValue+0xd2>
    2ed6:	84 2b       	or	r24, r20
    2ed8:	8c 93       	st	X, r24
    2eda:	8f c0       	rjmp	.+286    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTD:SET_BIT(PORTD,copy_u8PinId);break;
    2edc:	a2 e3       	ldi	r26, 0x32	; 50
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e2 e3       	ldi	r30, 0x32	; 50
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	48 2f       	mov	r20, r24
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	02 2e       	mov	r0, r18
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <DIO_voidSetPinValue+0xfe>
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	0a 94       	dec	r0
    2efc:	e2 f7       	brpl	.-8      	; 0x2ef6 <DIO_voidSetPinValue+0xfa>
    2efe:	84 2b       	or	r24, r20
    2f00:	8c 93       	st	X, r24
    2f02:	7b c0       	rjmp	.+246    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
			}
		}

		else if(copy_u8PinId<=7)
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	88 30       	cpi	r24, 0x08	; 8
    2f08:	08 f0       	brcs	.+2      	; 0x2f0c <DIO_voidSetPinValue+0x110>
    2f0a:	77 c0       	rjmp	.+238    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
		{
			if(copy_u8PinValue == DIO_PIN_LOW)
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	88 23       	and	r24, r24
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <DIO_voidSetPinValue+0x118>
    2f12:	73 c0       	rjmp	.+230    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
			{
				switch(copy_u8PortId)
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	28 2f       	mov	r18, r24
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	3d 83       	std	Y+5, r19	; 0x05
    2f1c:	2c 83       	std	Y+4, r18	; 0x04
    2f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f20:	9d 81       	ldd	r25, Y+5	; 0x05
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	91 05       	cpc	r25, r1
    2f26:	59 f1       	breq	.+86     	; 0x2f7e <DIO_voidSetPinValue+0x182>
    2f28:	2c 81       	ldd	r18, Y+4	; 0x04
    2f2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f2c:	22 30       	cpi	r18, 0x02	; 2
    2f2e:	31 05       	cpc	r19, r1
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <DIO_voidSetPinValue+0x140>
    2f32:	8c 81       	ldd	r24, Y+4	; 0x04
    2f34:	9d 81       	ldd	r25, Y+5	; 0x05
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	69 f0       	breq	.+26     	; 0x2f54 <DIO_voidSetPinValue+0x158>
    2f3a:	5f c0       	rjmp	.+190    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
    2f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f40:	22 30       	cpi	r18, 0x02	; 2
    2f42:	31 05       	cpc	r19, r1
    2f44:	89 f1       	breq	.+98     	; 0x2fa8 <DIO_voidSetPinValue+0x1ac>
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4a:	83 30       	cpi	r24, 0x03	; 3
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <DIO_voidSetPinValue+0x156>
    2f50:	40 c0       	rjmp	.+128    	; 0x2fd2 <DIO_voidSetPinValue+0x1d6>
    2f52:	53 c0       	rjmp	.+166    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
				{
				case DIO_PORTA:CLR_BIT(PORTA,copy_u8PinId);break;
    2f54:	ab e3       	ldi	r26, 0x3B	; 59
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	eb e3       	ldi	r30, 0x3B	; 59
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	48 2f       	mov	r20, r24
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	02 2e       	mov	r0, r18
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <DIO_voidSetPinValue+0x176>
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	0a 94       	dec	r0
    2f74:	e2 f7       	brpl	.-8      	; 0x2f6e <DIO_voidSetPinValue+0x172>
    2f76:	80 95       	com	r24
    2f78:	84 23       	and	r24, r20
    2f7a:	8c 93       	st	X, r24
    2f7c:	3e c0       	rjmp	.+124    	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB,copy_u8PinId);break;
    2f7e:	a8 e3       	ldi	r26, 0x38	; 56
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e8 e3       	ldi	r30, 0x38	; 56
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	48 2f       	mov	r20, r24
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	02 2e       	mov	r0, r18
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <DIO_voidSetPinValue+0x1a0>
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	0a 94       	dec	r0
    2f9e:	e2 f7       	brpl	.-8      	; 0x2f98 <DIO_voidSetPinValue+0x19c>
    2fa0:	80 95       	com	r24
    2fa2:	84 23       	and	r24, r20
    2fa4:	8c 93       	st	X, r24
    2fa6:	29 c0       	rjmp	.+82     	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC,copy_u8PinId);break;
    2fa8:	a5 e3       	ldi	r26, 0x35	; 53
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e5 e3       	ldi	r30, 0x35	; 53
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	48 2f       	mov	r20, r24
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	02 2e       	mov	r0, r18
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <DIO_voidSetPinValue+0x1ca>
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	0a 94       	dec	r0
    2fc8:	e2 f7       	brpl	.-8      	; 0x2fc2 <DIO_voidSetPinValue+0x1c6>
    2fca:	80 95       	com	r24
    2fcc:	84 23       	and	r24, r20
    2fce:	8c 93       	st	X, r24
    2fd0:	14 c0       	rjmp	.+40     	; 0x2ffa <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD,copy_u8PinId);break;
    2fd2:	a2 e3       	ldi	r26, 0x32	; 50
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e2 e3       	ldi	r30, 0x32	; 50
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	48 2f       	mov	r20, r24
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	02 2e       	mov	r0, r18
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <DIO_voidSetPinValue+0x1f4>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	0a 94       	dec	r0
    2ff2:	e2 f7       	brpl	.-8      	; 0x2fec <DIO_voidSetPinValue+0x1f0>
    2ff4:	80 95       	com	r24
    2ff6:	84 23       	and	r24, r20
    2ff8:	8c 93       	st	X, r24
				}
			}
		}
	}
}
    2ffa:	27 96       	adiw	r28, 0x07	; 7
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 *copy_pu8_PinValue)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <DIO_voidGetPinValue+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <DIO_voidGetPinValue+0x8>
    3014:	00 d0       	rcall	.+0      	; 0x3016 <DIO_voidGetPinValue+0xa>
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	6a 83       	std	Y+2, r22	; 0x02
    301e:	5c 83       	std	Y+4, r21	; 0x04
    3020:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	88 30       	cpi	r24, 0x08	; 8
    3026:	08 f0       	brcs	.+2      	; 0x302a <DIO_voidGetPinValue+0x1e>
    3028:	70 c0       	rjmp	.+224    	; 0x310a <DIO_voidGetPinValue+0xfe>
	{
		switch(copy_u8PortId)
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	3e 83       	std	Y+6, r19	; 0x06
    3032:	2d 83       	std	Y+5, r18	; 0x05
    3034:	4d 81       	ldd	r20, Y+5	; 0x05
    3036:	5e 81       	ldd	r21, Y+6	; 0x06
    3038:	41 30       	cpi	r20, 0x01	; 1
    303a:	51 05       	cpc	r21, r1
    303c:	59 f1       	breq	.+86     	; 0x3094 <DIO_voidGetPinValue+0x88>
    303e:	8d 81       	ldd	r24, Y+5	; 0x05
    3040:	9e 81       	ldd	r25, Y+6	; 0x06
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	91 05       	cpc	r25, r1
    3046:	34 f4       	brge	.+12     	; 0x3054 <DIO_voidGetPinValue+0x48>
    3048:	2d 81       	ldd	r18, Y+5	; 0x05
    304a:	3e 81       	ldd	r19, Y+6	; 0x06
    304c:	21 15       	cp	r18, r1
    304e:	31 05       	cpc	r19, r1
    3050:	69 f0       	breq	.+26     	; 0x306c <DIO_voidGetPinValue+0x60>
    3052:	5b c0       	rjmp	.+182    	; 0x310a <DIO_voidGetPinValue+0xfe>
    3054:	4d 81       	ldd	r20, Y+5	; 0x05
    3056:	5e 81       	ldd	r21, Y+6	; 0x06
    3058:	42 30       	cpi	r20, 0x02	; 2
    305a:	51 05       	cpc	r21, r1
    305c:	79 f1       	breq	.+94     	; 0x30bc <DIO_voidGetPinValue+0xb0>
    305e:	8d 81       	ldd	r24, Y+5	; 0x05
    3060:	9e 81       	ldd	r25, Y+6	; 0x06
    3062:	83 30       	cpi	r24, 0x03	; 3
    3064:	91 05       	cpc	r25, r1
    3066:	09 f4       	brne	.+2      	; 0x306a <DIO_voidGetPinValue+0x5e>
    3068:	3d c0       	rjmp	.+122    	; 0x30e4 <DIO_voidGetPinValue+0xd8>
    306a:	4f c0       	rjmp	.+158    	; 0x310a <DIO_voidGetPinValue+0xfe>
		{
		case DIO_PORTA:*copy_pu8_PinValue = GET_BIT(PINA,copy_u8PinId);break;
    306c:	e9 e3       	ldi	r30, 0x39	; 57
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a9 01       	movw	r20, r18
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <DIO_voidGetPinValue+0x78>
    3080:	55 95       	asr	r21
    3082:	47 95       	ror	r20
    3084:	8a 95       	dec	r24
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <DIO_voidGetPinValue+0x74>
    3088:	ca 01       	movw	r24, r20
    308a:	81 70       	andi	r24, 0x01	; 1
    308c:	eb 81       	ldd	r30, Y+3	; 0x03
    308e:	fc 81       	ldd	r31, Y+4	; 0x04
    3090:	80 83       	st	Z, r24
    3092:	3b c0       	rjmp	.+118    	; 0x310a <DIO_voidGetPinValue+0xfe>
		case DIO_PORTB:*copy_pu8_PinValue = GET_BIT(PINB,copy_u8PinId);break;
    3094:	e6 e3       	ldi	r30, 0x36	; 54
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	88 2f       	mov	r24, r24
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a9 01       	movw	r20, r18
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <DIO_voidGetPinValue+0xa0>
    30a8:	55 95       	asr	r21
    30aa:	47 95       	ror	r20
    30ac:	8a 95       	dec	r24
    30ae:	e2 f7       	brpl	.-8      	; 0x30a8 <DIO_voidGetPinValue+0x9c>
    30b0:	ca 01       	movw	r24, r20
    30b2:	81 70       	andi	r24, 0x01	; 1
    30b4:	eb 81       	ldd	r30, Y+3	; 0x03
    30b6:	fc 81       	ldd	r31, Y+4	; 0x04
    30b8:	80 83       	st	Z, r24
    30ba:	27 c0       	rjmp	.+78     	; 0x310a <DIO_voidGetPinValue+0xfe>
		case DIO_PORTC:*copy_pu8_PinValue = GET_BIT(PINC,copy_u8PinId);break;
    30bc:	e3 e3       	ldi	r30, 0x33	; 51
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	a9 01       	movw	r20, r18
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <DIO_voidGetPinValue+0xc8>
    30d0:	55 95       	asr	r21
    30d2:	47 95       	ror	r20
    30d4:	8a 95       	dec	r24
    30d6:	e2 f7       	brpl	.-8      	; 0x30d0 <DIO_voidGetPinValue+0xc4>
    30d8:	ca 01       	movw	r24, r20
    30da:	81 70       	andi	r24, 0x01	; 1
    30dc:	eb 81       	ldd	r30, Y+3	; 0x03
    30de:	fc 81       	ldd	r31, Y+4	; 0x04
    30e0:	80 83       	st	Z, r24
    30e2:	13 c0       	rjmp	.+38     	; 0x310a <DIO_voidGetPinValue+0xfe>
		case DIO_PORTD:*copy_pu8_PinValue = GET_BIT(PIND,copy_u8PinId);break;
    30e4:	e0 e3       	ldi	r30, 0x30	; 48
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	88 2f       	mov	r24, r24
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	a9 01       	movw	r20, r18
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <DIO_voidGetPinValue+0xf0>
    30f8:	55 95       	asr	r21
    30fa:	47 95       	ror	r20
    30fc:	8a 95       	dec	r24
    30fe:	e2 f7       	brpl	.-8      	; 0x30f8 <DIO_voidGetPinValue+0xec>
    3100:	ca 01       	movw	r24, r20
    3102:	81 70       	andi	r24, 0x01	; 1
    3104:	eb 81       	ldd	r30, Y+3	; 0x03
    3106:	fc 81       	ldd	r31, Y+4	; 0x04
    3108:	80 83       	st	Z, r24
		}
	}
}
    310a:	26 96       	adiw	r28, 0x06	; 6
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	00 d0       	rcall	.+0      	; 0x3122 <DIO_u8GetPinValue+0x6>
    3122:	00 d0       	rcall	.+0      	; 0x3124 <DIO_u8GetPinValue+0x8>
    3124:	0f 92       	push	r0
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	8a 83       	std	Y+2, r24	; 0x02
    312c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading;
	if(copy_u8PinId<=7)
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	88 30       	cpi	r24, 0x08	; 8
    3132:	08 f0       	brcs	.+2      	; 0x3136 <DIO_u8GetPinValue+0x1a>
    3134:	67 c0       	rjmp	.+206    	; 0x3204 <DIO_u8GetPinValue+0xe8>
	{
		switch(copy_u8PortId)
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	3d 83       	std	Y+5, r19	; 0x05
    313e:	2c 83       	std	Y+4, r18	; 0x04
    3140:	4c 81       	ldd	r20, Y+4	; 0x04
    3142:	5d 81       	ldd	r21, Y+5	; 0x05
    3144:	41 30       	cpi	r20, 0x01	; 1
    3146:	51 05       	cpc	r21, r1
    3148:	41 f1       	breq	.+80     	; 0x319a <DIO_u8GetPinValue+0x7e>
    314a:	8c 81       	ldd	r24, Y+4	; 0x04
    314c:	9d 81       	ldd	r25, Y+5	; 0x05
    314e:	82 30       	cpi	r24, 0x02	; 2
    3150:	91 05       	cpc	r25, r1
    3152:	34 f4       	brge	.+12     	; 0x3160 <DIO_u8GetPinValue+0x44>
    3154:	2c 81       	ldd	r18, Y+4	; 0x04
    3156:	3d 81       	ldd	r19, Y+5	; 0x05
    3158:	21 15       	cp	r18, r1
    315a:	31 05       	cpc	r19, r1
    315c:	61 f0       	breq	.+24     	; 0x3176 <DIO_u8GetPinValue+0x5a>
    315e:	52 c0       	rjmp	.+164    	; 0x3204 <DIO_u8GetPinValue+0xe8>
    3160:	4c 81       	ldd	r20, Y+4	; 0x04
    3162:	5d 81       	ldd	r21, Y+5	; 0x05
    3164:	42 30       	cpi	r20, 0x02	; 2
    3166:	51 05       	cpc	r21, r1
    3168:	51 f1       	breq	.+84     	; 0x31be <DIO_u8GetPinValue+0xa2>
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	9d 81       	ldd	r25, Y+5	; 0x05
    316e:	83 30       	cpi	r24, 0x03	; 3
    3170:	91 05       	cpc	r25, r1
    3172:	b9 f1       	breq	.+110    	; 0x31e2 <DIO_u8GetPinValue+0xc6>
    3174:	47 c0       	rjmp	.+142    	; 0x3204 <DIO_u8GetPinValue+0xe8>
		{
		case DIO_PORTA:Local_u8Reading = GET_BIT(PINA,copy_u8PinId);break;
    3176:	e9 e3       	ldi	r30, 0x39	; 57
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	88 2f       	mov	r24, r24
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	a9 01       	movw	r20, r18
    3188:	02 c0       	rjmp	.+4      	; 0x318e <DIO_u8GetPinValue+0x72>
    318a:	55 95       	asr	r21
    318c:	47 95       	ror	r20
    318e:	8a 95       	dec	r24
    3190:	e2 f7       	brpl	.-8      	; 0x318a <DIO_u8GetPinValue+0x6e>
    3192:	ca 01       	movw	r24, r20
    3194:	81 70       	andi	r24, 0x01	; 1
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	35 c0       	rjmp	.+106    	; 0x3204 <DIO_u8GetPinValue+0xe8>
		case DIO_PORTB:Local_u8Reading = GET_BIT(PINB,copy_u8PinId);break;
    319a:	e6 e3       	ldi	r30, 0x36	; 54
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	88 2f       	mov	r24, r24
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a9 01       	movw	r20, r18
    31ac:	02 c0       	rjmp	.+4      	; 0x31b2 <DIO_u8GetPinValue+0x96>
    31ae:	55 95       	asr	r21
    31b0:	47 95       	ror	r20
    31b2:	8a 95       	dec	r24
    31b4:	e2 f7       	brpl	.-8      	; 0x31ae <DIO_u8GetPinValue+0x92>
    31b6:	ca 01       	movw	r24, r20
    31b8:	81 70       	andi	r24, 0x01	; 1
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	23 c0       	rjmp	.+70     	; 0x3204 <DIO_u8GetPinValue+0xe8>
		case DIO_PORTC:Local_u8Reading = GET_BIT(PINC,copy_u8PinId);break;
    31be:	e3 e3       	ldi	r30, 0x33	; 51
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a9 01       	movw	r20, r18
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <DIO_u8GetPinValue+0xba>
    31d2:	55 95       	asr	r21
    31d4:	47 95       	ror	r20
    31d6:	8a 95       	dec	r24
    31d8:	e2 f7       	brpl	.-8      	; 0x31d2 <DIO_u8GetPinValue+0xb6>
    31da:	ca 01       	movw	r24, r20
    31dc:	81 70       	andi	r24, 0x01	; 1
    31de:	89 83       	std	Y+1, r24	; 0x01
    31e0:	11 c0       	rjmp	.+34     	; 0x3204 <DIO_u8GetPinValue+0xe8>
		case DIO_PORTD:Local_u8Reading = GET_BIT(PIND,copy_u8PinId);break;
    31e2:	e0 e3       	ldi	r30, 0x30	; 48
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a9 01       	movw	r20, r18
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <DIO_u8GetPinValue+0xde>
    31f6:	55 95       	asr	r21
    31f8:	47 95       	ror	r20
    31fa:	8a 95       	dec	r24
    31fc:	e2 f7       	brpl	.-8      	; 0x31f6 <DIO_u8GetPinValue+0xda>
    31fe:	ca 01       	movw	r24, r20
    3200:	81 70       	andi	r24, 0x01	; 1
    3202:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8Reading;
    3204:	89 81       	ldd	r24, Y+1	; 0x01
}
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	00 d0       	rcall	.+0      	; 0x321c <DIO_voidTogglePinValue+0x6>
    321c:	00 d0       	rcall	.+0      	; 0x321e <DIO_voidTogglePinValue+0x8>
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	3c 83       	std	Y+4, r19	; 0x04
    322e:	2b 83       	std	Y+3, r18	; 0x03
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	91 05       	cpc	r25, r1
    3238:	49 f1       	breq	.+82     	; 0x328c <DIO_voidTogglePinValue+0x76>
    323a:	2b 81       	ldd	r18, Y+3	; 0x03
    323c:	3c 81       	ldd	r19, Y+4	; 0x04
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	31 05       	cpc	r19, r1
    3242:	2c f4       	brge	.+10     	; 0x324e <DIO_voidTogglePinValue+0x38>
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	61 f0       	breq	.+24     	; 0x3264 <DIO_voidTogglePinValue+0x4e>
    324c:	5a c0       	rjmp	.+180    	; 0x3302 <DIO_voidTogglePinValue+0xec>
    324e:	2b 81       	ldd	r18, Y+3	; 0x03
    3250:	3c 81       	ldd	r19, Y+4	; 0x04
    3252:	22 30       	cpi	r18, 0x02	; 2
    3254:	31 05       	cpc	r19, r1
    3256:	71 f1       	breq	.+92     	; 0x32b4 <DIO_voidTogglePinValue+0x9e>
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	83 30       	cpi	r24, 0x03	; 3
    325e:	91 05       	cpc	r25, r1
    3260:	e9 f1       	breq	.+122    	; 0x32dc <DIO_voidTogglePinValue+0xc6>
    3262:	4f c0       	rjmp	.+158    	; 0x3302 <DIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOG_BIT(PORTA, copy_u8PinId); break;
    3264:	ab e3       	ldi	r26, 0x3B	; 59
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	eb e3       	ldi	r30, 0x3B	; 59
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	48 2f       	mov	r20, r24
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	02 2e       	mov	r0, r18
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <DIO_voidTogglePinValue+0x6c>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <DIO_voidTogglePinValue+0x68>
    3286:	84 27       	eor	r24, r20
    3288:	8c 93       	st	X, r24
    328a:	3b c0       	rjmp	.+118    	; 0x3302 <DIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOG_BIT(PORTB, copy_u8PinId); break;
    328c:	a8 e3       	ldi	r26, 0x38	; 56
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e8 e3       	ldi	r30, 0x38	; 56
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	48 2f       	mov	r20, r24
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	02 2e       	mov	r0, r18
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <DIO_voidTogglePinValue+0x94>
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	0a 94       	dec	r0
    32ac:	e2 f7       	brpl	.-8      	; 0x32a6 <DIO_voidTogglePinValue+0x90>
    32ae:	84 27       	eor	r24, r20
    32b0:	8c 93       	st	X, r24
    32b2:	27 c0       	rjmp	.+78     	; 0x3302 <DIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOG_BIT(PORTC, copy_u8PinId); break;
    32b4:	a5 e3       	ldi	r26, 0x35	; 53
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e5 e3       	ldi	r30, 0x35	; 53
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	48 2f       	mov	r20, r24
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	28 2f       	mov	r18, r24
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	02 2e       	mov	r0, r18
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <DIO_voidTogglePinValue+0xbc>
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	0a 94       	dec	r0
    32d4:	e2 f7       	brpl	.-8      	; 0x32ce <DIO_voidTogglePinValue+0xb8>
    32d6:	84 27       	eor	r24, r20
    32d8:	8c 93       	st	X, r24
    32da:	13 c0       	rjmp	.+38     	; 0x3302 <DIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOG_BIT(PORTD, copy_u8PinId); break;
    32dc:	a2 e3       	ldi	r26, 0x32	; 50
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e2 e3       	ldi	r30, 0x32	; 50
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	48 2f       	mov	r20, r24
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	28 2f       	mov	r18, r24
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	02 2e       	mov	r0, r18
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <DIO_voidTogglePinValue+0xe4>
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	0a 94       	dec	r0
    32fc:	e2 f7       	brpl	.-8      	; 0x32f6 <DIO_voidTogglePinValue+0xe0>
    32fe:	84 27       	eor	r24, r20
    3300:	8c 93       	st	X, r24
	}
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <DIO_voidActivePinInPullUpResistance>:

void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	00 d0       	rcall	.+0      	; 0x3316 <DIO_voidActivePinInPullUpResistance+0x6>
    3316:	00 d0       	rcall	.+0      	; 0x3318 <DIO_voidActivePinInPullUpResistance+0x8>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	3c 83       	std	Y+4, r19	; 0x04
    3328:	2b 83       	std	Y+3, r18	; 0x03
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	91 05       	cpc	r25, r1
    3332:	49 f1       	breq	.+82     	; 0x3386 <DIO_voidActivePinInPullUpResistance+0x76>
    3334:	2b 81       	ldd	r18, Y+3	; 0x03
    3336:	3c 81       	ldd	r19, Y+4	; 0x04
    3338:	22 30       	cpi	r18, 0x02	; 2
    333a:	31 05       	cpc	r19, r1
    333c:	2c f4       	brge	.+10     	; 0x3348 <DIO_voidActivePinInPullUpResistance+0x38>
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	9c 81       	ldd	r25, Y+4	; 0x04
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	61 f0       	breq	.+24     	; 0x335e <DIO_voidActivePinInPullUpResistance+0x4e>
    3346:	5a c0       	rjmp	.+180    	; 0x33fc <DIO_voidActivePinInPullUpResistance+0xec>
    3348:	2b 81       	ldd	r18, Y+3	; 0x03
    334a:	3c 81       	ldd	r19, Y+4	; 0x04
    334c:	22 30       	cpi	r18, 0x02	; 2
    334e:	31 05       	cpc	r19, r1
    3350:	71 f1       	breq	.+92     	; 0x33ae <DIO_voidActivePinInPullUpResistance+0x9e>
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	83 30       	cpi	r24, 0x03	; 3
    3358:	91 05       	cpc	r25, r1
    335a:	e9 f1       	breq	.+122    	; 0x33d6 <DIO_voidActivePinInPullUpResistance+0xc6>
    335c:	4f c0       	rjmp	.+158    	; 0x33fc <DIO_voidActivePinInPullUpResistance+0xec>
	{
	case DIO_PORTA: SET_BIT(PORTA, copy_u8PinId); break;
    335e:	ab e3       	ldi	r26, 0x3B	; 59
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	eb e3       	ldi	r30, 0x3B	; 59
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	48 2f       	mov	r20, r24
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <DIO_voidActivePinInPullUpResistance+0x6c>
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <DIO_voidActivePinInPullUpResistance+0x68>
    3380:	84 2b       	or	r24, r20
    3382:	8c 93       	st	X, r24
    3384:	3b c0       	rjmp	.+118    	; 0x33fc <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTB: SET_BIT(PORTB, copy_u8PinId); break;
    3386:	a8 e3       	ldi	r26, 0x38	; 56
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e8 e3       	ldi	r30, 0x38	; 56
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	48 2f       	mov	r20, r24
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	02 2e       	mov	r0, r18
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <DIO_voidActivePinInPullUpResistance+0x94>
    33a0:	88 0f       	add	r24, r24
    33a2:	99 1f       	adc	r25, r25
    33a4:	0a 94       	dec	r0
    33a6:	e2 f7       	brpl	.-8      	; 0x33a0 <DIO_voidActivePinInPullUpResistance+0x90>
    33a8:	84 2b       	or	r24, r20
    33aa:	8c 93       	st	X, r24
    33ac:	27 c0       	rjmp	.+78     	; 0x33fc <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTC: SET_BIT(PORTC, copy_u8PinId); break;
    33ae:	a5 e3       	ldi	r26, 0x35	; 53
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	e5 e3       	ldi	r30, 0x35	; 53
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	48 2f       	mov	r20, r24
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	02 2e       	mov	r0, r18
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <DIO_voidActivePinInPullUpResistance+0xbc>
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	0a 94       	dec	r0
    33ce:	e2 f7       	brpl	.-8      	; 0x33c8 <DIO_voidActivePinInPullUpResistance+0xb8>
    33d0:	84 2b       	or	r24, r20
    33d2:	8c 93       	st	X, r24
    33d4:	13 c0       	rjmp	.+38     	; 0x33fc <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTD: SET_BIT(PORTD, copy_u8PinId); break;
    33d6:	a2 e3       	ldi	r26, 0x32	; 50
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	e2 e3       	ldi	r30, 0x32	; 50
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	48 2f       	mov	r20, r24
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	28 2f       	mov	r18, r24
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	02 2e       	mov	r0, r18
    33ee:	02 c0       	rjmp	.+4      	; 0x33f4 <DIO_voidActivePinInPullUpResistance+0xe4>
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	0a 94       	dec	r0
    33f6:	e2 f7       	brpl	.-8      	; 0x33f0 <DIO_voidActivePinInPullUpResistance+0xe0>
    33f8:	84 2b       	or	r24, r20
    33fa:	8c 93       	st	X, r24
	}
}
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <DIO_voidSetPortDirection>:


                      /*************** PORT APIS ***************/

void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	00 d0       	rcall	.+0      	; 0x3410 <DIO_voidSetPortDirection+0x6>
    3410:	00 d0       	rcall	.+0      	; 0x3412 <DIO_voidSetPortDirection+0x8>
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	3c 83       	std	Y+4, r19	; 0x04
    3422:	2b 83       	std	Y+3, r18	; 0x03
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	9c 81       	ldd	r25, Y+4	; 0x04
    3428:	81 30       	cpi	r24, 0x01	; 1
    342a:	91 05       	cpc	r25, r1
    342c:	d1 f0       	breq	.+52     	; 0x3462 <DIO_voidSetPortDirection+0x58>
    342e:	2b 81       	ldd	r18, Y+3	; 0x03
    3430:	3c 81       	ldd	r19, Y+4	; 0x04
    3432:	22 30       	cpi	r18, 0x02	; 2
    3434:	31 05       	cpc	r19, r1
    3436:	2c f4       	brge	.+10     	; 0x3442 <DIO_voidSetPortDirection+0x38>
    3438:	8b 81       	ldd	r24, Y+3	; 0x03
    343a:	9c 81       	ldd	r25, Y+4	; 0x04
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	61 f0       	breq	.+24     	; 0x3458 <DIO_voidSetPortDirection+0x4e>
    3440:	1e c0       	rjmp	.+60     	; 0x347e <DIO_voidSetPortDirection+0x74>
    3442:	2b 81       	ldd	r18, Y+3	; 0x03
    3444:	3c 81       	ldd	r19, Y+4	; 0x04
    3446:	22 30       	cpi	r18, 0x02	; 2
    3448:	31 05       	cpc	r19, r1
    344a:	81 f0       	breq	.+32     	; 0x346c <DIO_voidSetPortDirection+0x62>
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	83 30       	cpi	r24, 0x03	; 3
    3452:	91 05       	cpc	r25, r1
    3454:	81 f0       	breq	.+32     	; 0x3476 <DIO_voidSetPortDirection+0x6c>
    3456:	13 c0       	rjmp	.+38     	; 0x347e <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA = copy_u8PortDirection;break;
    3458:	ea e3       	ldi	r30, 0x3A	; 58
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	80 83       	st	Z, r24
    3460:	0e c0       	rjmp	.+28     	; 0x347e <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:DDRB = copy_u8PortDirection;break;
    3462:	e7 e3       	ldi	r30, 0x37	; 55
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	80 83       	st	Z, r24
    346a:	09 c0       	rjmp	.+18     	; 0x347e <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:DDRC = copy_u8PortDirection;break;
    346c:	e4 e3       	ldi	r30, 0x34	; 52
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	80 83       	st	Z, r24
    3474:	04 c0       	rjmp	.+8      	; 0x347e <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:DDRD = copy_u8PortDirection;break;
    3476:	e1 e3       	ldi	r30, 0x31	; 49
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	80 83       	st	Z, r24
	}
}
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	00 d0       	rcall	.+0      	; 0x3492 <DIO_voidSetPortValue+0x6>
    3492:	00 d0       	rcall	.+0      	; 0x3494 <DIO_voidSetPortValue+0x8>
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	28 2f       	mov	r18, r24
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	3c 83       	std	Y+4, r19	; 0x04
    34a4:	2b 83       	std	Y+3, r18	; 0x03
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	9c 81       	ldd	r25, Y+4	; 0x04
    34aa:	81 30       	cpi	r24, 0x01	; 1
    34ac:	91 05       	cpc	r25, r1
    34ae:	d1 f0       	breq	.+52     	; 0x34e4 <DIO_voidSetPortValue+0x58>
    34b0:	2b 81       	ldd	r18, Y+3	; 0x03
    34b2:	3c 81       	ldd	r19, Y+4	; 0x04
    34b4:	22 30       	cpi	r18, 0x02	; 2
    34b6:	31 05       	cpc	r19, r1
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <DIO_voidSetPortValue+0x38>
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	61 f0       	breq	.+24     	; 0x34da <DIO_voidSetPortValue+0x4e>
    34c2:	1e c0       	rjmp	.+60     	; 0x3500 <DIO_voidSetPortValue+0x74>
    34c4:	2b 81       	ldd	r18, Y+3	; 0x03
    34c6:	3c 81       	ldd	r19, Y+4	; 0x04
    34c8:	22 30       	cpi	r18, 0x02	; 2
    34ca:	31 05       	cpc	r19, r1
    34cc:	81 f0       	breq	.+32     	; 0x34ee <DIO_voidSetPortValue+0x62>
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	9c 81       	ldd	r25, Y+4	; 0x04
    34d2:	83 30       	cpi	r24, 0x03	; 3
    34d4:	91 05       	cpc	r25, r1
    34d6:	81 f0       	breq	.+32     	; 0x34f8 <DIO_voidSetPortValue+0x6c>
    34d8:	13 c0       	rjmp	.+38     	; 0x3500 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA = copy_u8PortValue;break;
    34da:	eb e3       	ldi	r30, 0x3B	; 59
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	80 83       	st	Z, r24
    34e2:	0e c0       	rjmp	.+28     	; 0x3500 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:PORTB = copy_u8PortValue;break;
    34e4:	e8 e3       	ldi	r30, 0x38	; 56
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	80 83       	st	Z, r24
    34ec:	09 c0       	rjmp	.+18     	; 0x3500 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:PORTC = copy_u8PortValue;break;
    34ee:	e5 e3       	ldi	r30, 0x35	; 53
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
    34f4:	80 83       	st	Z, r24
    34f6:	04 c0       	rjmp	.+8      	; 0x3500 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:PORTD = copy_u8PortValue;break;
    34f8:	e2 e3       	ldi	r30, 0x32	; 50
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	8a 81       	ldd	r24, Y+2	; 0x02
    34fe:	80 83       	st	Z, r24
	}
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <DIO_voidGetPortValue>:

void DIO_voidGetPortValue(u8 copy_u8PortId, u8 *copy_pu8_PinValue)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <DIO_voidGetPortValue+0x6>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <DIO_voidGetPortValue+0x8>
    3516:	0f 92       	push	r0
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	7b 83       	std	Y+3, r23	; 0x03
    3520:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	3d 83       	std	Y+5, r19	; 0x05
    352a:	2c 83       	std	Y+4, r18	; 0x04
    352c:	8c 81       	ldd	r24, Y+4	; 0x04
    352e:	9d 81       	ldd	r25, Y+5	; 0x05
    3530:	81 30       	cpi	r24, 0x01	; 1
    3532:	91 05       	cpc	r25, r1
    3534:	e1 f0       	breq	.+56     	; 0x356e <DIO_voidGetPortValue+0x60>
    3536:	2c 81       	ldd	r18, Y+4	; 0x04
    3538:	3d 81       	ldd	r19, Y+5	; 0x05
    353a:	22 30       	cpi	r18, 0x02	; 2
    353c:	31 05       	cpc	r19, r1
    353e:	2c f4       	brge	.+10     	; 0x354a <DIO_voidGetPortValue+0x3c>
    3540:	8c 81       	ldd	r24, Y+4	; 0x04
    3542:	9d 81       	ldd	r25, Y+5	; 0x05
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	61 f0       	breq	.+24     	; 0x3560 <DIO_voidGetPortValue+0x52>
    3548:	26 c0       	rjmp	.+76     	; 0x3596 <DIO_voidGetPortValue+0x88>
    354a:	2c 81       	ldd	r18, Y+4	; 0x04
    354c:	3d 81       	ldd	r19, Y+5	; 0x05
    354e:	22 30       	cpi	r18, 0x02	; 2
    3550:	31 05       	cpc	r19, r1
    3552:	a1 f0       	breq	.+40     	; 0x357c <DIO_voidGetPortValue+0x6e>
    3554:	8c 81       	ldd	r24, Y+4	; 0x04
    3556:	9d 81       	ldd	r25, Y+5	; 0x05
    3558:	83 30       	cpi	r24, 0x03	; 3
    355a:	91 05       	cpc	r25, r1
    355c:	b1 f0       	breq	.+44     	; 0x358a <DIO_voidGetPortValue+0x7c>
    355e:	1b c0       	rjmp	.+54     	; 0x3596 <DIO_voidGetPortValue+0x88>
	{
	case DIO_PORTA: *copy_pu8_PinValue = PORTA;break;
    3560:	eb e3       	ldi	r30, 0x3B	; 59
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	ea 81       	ldd	r30, Y+2	; 0x02
    3568:	fb 81       	ldd	r31, Y+3	; 0x03
    356a:	80 83       	st	Z, r24
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <DIO_voidGetPortValue+0x88>
	case DIO_PORTB: *copy_pu8_PinValue = PORTB;break;
    356e:	e8 e3       	ldi	r30, 0x38	; 56
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	ea 81       	ldd	r30, Y+2	; 0x02
    3576:	fb 81       	ldd	r31, Y+3	; 0x03
    3578:	80 83       	st	Z, r24
    357a:	0d c0       	rjmp	.+26     	; 0x3596 <DIO_voidGetPortValue+0x88>
	case DIO_PORTC: *copy_pu8_PinValue = PORTC;break;
    357c:	e5 e3       	ldi	r30, 0x35	; 53
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	ea 81       	ldd	r30, Y+2	; 0x02
    3584:	fb 81       	ldd	r31, Y+3	; 0x03
    3586:	80 83       	st	Z, r24
    3588:	06 c0       	rjmp	.+12     	; 0x3596 <DIO_voidGetPortValue+0x88>
	case DIO_PORTD: *copy_pu8_PinValue = PORTD;break;
    358a:	e2 e3       	ldi	r30, 0x32	; 50
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	ea 81       	ldd	r30, Y+2	; 0x02
    3592:	fb 81       	ldd	r31, Y+3	; 0x03
    3594:	80 83       	st	Z, r24
	}
}
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue(u8 copy_u8PortId)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <DIO_voidTogglePortValue+0x6>
    35ac:	0f 92       	push	r0
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	3b 83       	std	Y+3, r19	; 0x03
    35bc:	2a 83       	std	Y+2, r18	; 0x02
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	9b 81       	ldd	r25, Y+3	; 0x03
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	91 05       	cpc	r25, r1
    35c6:	e9 f0       	breq	.+58     	; 0x3602 <DIO_voidTogglePortValue+0x5c>
    35c8:	2a 81       	ldd	r18, Y+2	; 0x02
    35ca:	3b 81       	ldd	r19, Y+3	; 0x03
    35cc:	22 30       	cpi	r18, 0x02	; 2
    35ce:	31 05       	cpc	r19, r1
    35d0:	2c f4       	brge	.+10     	; 0x35dc <DIO_voidTogglePortValue+0x36>
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	61 f0       	breq	.+24     	; 0x35f2 <DIO_voidTogglePortValue+0x4c>
    35da:	2a c0       	rjmp	.+84     	; 0x3630 <DIO_voidTogglePortValue+0x8a>
    35dc:	2a 81       	ldd	r18, Y+2	; 0x02
    35de:	3b 81       	ldd	r19, Y+3	; 0x03
    35e0:	22 30       	cpi	r18, 0x02	; 2
    35e2:	31 05       	cpc	r19, r1
    35e4:	b1 f0       	breq	.+44     	; 0x3612 <DIO_voidTogglePortValue+0x6c>
    35e6:	8a 81       	ldd	r24, Y+2	; 0x02
    35e8:	9b 81       	ldd	r25, Y+3	; 0x03
    35ea:	83 30       	cpi	r24, 0x03	; 3
    35ec:	91 05       	cpc	r25, r1
    35ee:	c9 f0       	breq	.+50     	; 0x3622 <DIO_voidTogglePortValue+0x7c>
    35f0:	1f c0       	rjmp	.+62     	; 0x3630 <DIO_voidTogglePortValue+0x8a>
	{
	case DIO_PORTA: PORTA^=DIO_PORT_HIGH;break;
    35f2:	ab e3       	ldi	r26, 0x3B	; 59
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	eb e3       	ldi	r30, 0x3B	; 59
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	80 95       	com	r24
    35fe:	8c 93       	st	X, r24
    3600:	17 c0       	rjmp	.+46     	; 0x3630 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTB: PORTB^=DIO_PORT_HIGH;break;
    3602:	a8 e3       	ldi	r26, 0x38	; 56
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e8 e3       	ldi	r30, 0x38	; 56
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	80 95       	com	r24
    360e:	8c 93       	st	X, r24
    3610:	0f c0       	rjmp	.+30     	; 0x3630 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTC: PORTC^=DIO_PORT_HIGH;break;
    3612:	a5 e3       	ldi	r26, 0x35	; 53
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e5 e3       	ldi	r30, 0x35	; 53
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	80 95       	com	r24
    361e:	8c 93       	st	X, r24
    3620:	07 c0       	rjmp	.+14     	; 0x3630 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTD: PORTD^=DIO_PORT_HIGH;break;
    3622:	a2 e3       	ldi	r26, 0x32	; 50
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	e2 e3       	ldi	r30, 0x32	; 50
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	80 95       	com	r24
    362e:	8c 93       	st	X, r24
	}
}
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <DIO_voidActivePortInPullUpResistance>:

void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	00 d0       	rcall	.+0      	; 0x3642 <DIO_voidActivePortInPullUpResistance+0x6>
    3642:	0f 92       	push	r0
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	28 2f       	mov	r18, r24
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	3b 83       	std	Y+3, r19	; 0x03
    3652:	2a 83       	std	Y+2, r18	; 0x02
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	9b 81       	ldd	r25, Y+3	; 0x03
    3658:	81 30       	cpi	r24, 0x01	; 1
    365a:	91 05       	cpc	r25, r1
    365c:	d1 f0       	breq	.+52     	; 0x3692 <DIO_voidActivePortInPullUpResistance+0x56>
    365e:	2a 81       	ldd	r18, Y+2	; 0x02
    3660:	3b 81       	ldd	r19, Y+3	; 0x03
    3662:	22 30       	cpi	r18, 0x02	; 2
    3664:	31 05       	cpc	r19, r1
    3666:	2c f4       	brge	.+10     	; 0x3672 <DIO_voidActivePortInPullUpResistance+0x36>
    3668:	8a 81       	ldd	r24, Y+2	; 0x02
    366a:	9b 81       	ldd	r25, Y+3	; 0x03
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	61 f0       	breq	.+24     	; 0x3688 <DIO_voidActivePortInPullUpResistance+0x4c>
    3670:	1e c0       	rjmp	.+60     	; 0x36ae <DIO_voidActivePortInPullUpResistance+0x72>
    3672:	2a 81       	ldd	r18, Y+2	; 0x02
    3674:	3b 81       	ldd	r19, Y+3	; 0x03
    3676:	22 30       	cpi	r18, 0x02	; 2
    3678:	31 05       	cpc	r19, r1
    367a:	81 f0       	breq	.+32     	; 0x369c <DIO_voidActivePortInPullUpResistance+0x60>
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	9b 81       	ldd	r25, Y+3	; 0x03
    3680:	83 30       	cpi	r24, 0x03	; 3
    3682:	91 05       	cpc	r25, r1
    3684:	81 f0       	breq	.+32     	; 0x36a6 <DIO_voidActivePortInPullUpResistance+0x6a>
    3686:	13 c0       	rjmp	.+38     	; 0x36ae <DIO_voidActivePortInPullUpResistance+0x72>
	{
	case DIO_PORTA: PORTA = DIO_PORT_HIGH;break;
    3688:	eb e3       	ldi	r30, 0x3B	; 59
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	8f ef       	ldi	r24, 0xFF	; 255
    368e:	80 83       	st	Z, r24
    3690:	0e c0       	rjmp	.+28     	; 0x36ae <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTB: PORTB = DIO_PORT_HIGH;break;
    3692:	e8 e3       	ldi	r30, 0x38	; 56
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	8f ef       	ldi	r24, 0xFF	; 255
    3698:	80 83       	st	Z, r24
    369a:	09 c0       	rjmp	.+18     	; 0x36ae <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTC: PORTC = DIO_PORT_HIGH;break;
    369c:	e5 e3       	ldi	r30, 0x35	; 53
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	8f ef       	ldi	r24, 0xFF	; 255
    36a2:	80 83       	st	Z, r24
    36a4:	04 c0       	rjmp	.+8      	; 0x36ae <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTD: PORTD = DIO_PORT_HIGH;break;
    36a6:	e2 e3       	ldi	r30, 0x32	; 50
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	8f ef       	ldi	r24, 0xFF	; 255
    36ac:	80 83       	st	Z, r24
	}
}
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <KeyPad_Init>:




void KeyPad_Init(void)
{
    36ba:	df 93       	push	r29
    36bc:	cf 93       	push	r28
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN0 , DIO_PIN_OUTPUT);
    36c2:	83 e0       	ldi	r24, 0x03	; 3
    36c4:	67 e0       	ldi	r22, 0x07	; 7
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN1 , DIO_PIN_OUTPUT);
    36cc:	83 e0       	ldi	r24, 0x03	; 3
    36ce:	66 e0       	ldi	r22, 0x06	; 6
    36d0:	41 e0       	ldi	r20, 0x01	; 1
    36d2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN2 , DIO_PIN_OUTPUT);
    36d6:	83 e0       	ldi	r24, 0x03	; 3
    36d8:	64 e0       	ldi	r22, 0x04	; 4
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN3 , DIO_PIN_OUTPUT);
    36e0:	83 e0       	ldi	r24, 0x03	; 3
    36e2:	63 e0       	ldi	r22, 0x03	; 3
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW0 , DIO_PIN_INPUT);
    36ea:	82 e0       	ldi	r24, 0x02	; 2
    36ec:	65 e0       	ldi	r22, 0x05	; 5
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW1 , DIO_PIN_INPUT);
    36f4:	82 e0       	ldi	r24, 0x02	; 2
    36f6:	64 e0       	ldi	r22, 0x04	; 4
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW2 , DIO_PIN_INPUT);
    36fe:	82 e0       	ldi	r24, 0x02	; 2
    3700:	63 e0       	ldi	r22, 0x03	; 3
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW3 , DIO_PIN_INPUT);
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	62 e0       	ldi	r22, 0x02	; 2
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>

	SET_BIT(PORTC , KEYPAD_ROW0);
    3712:	a5 e3       	ldi	r26, 0x35	; 53
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	e5 e3       	ldi	r30, 0x35	; 53
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	80 62       	ori	r24, 0x20	; 32
    371e:	8c 93       	st	X, r24
	SET_BIT(PORTC , KEYPAD_ROW1);
    3720:	a5 e3       	ldi	r26, 0x35	; 53
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e5 e3       	ldi	r30, 0x35	; 53
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	80 61       	ori	r24, 0x10	; 16
    372c:	8c 93       	st	X, r24
	SET_BIT(PORTC , KEYPAD_ROW2);
    372e:	a5 e3       	ldi	r26, 0x35	; 53
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	e5 e3       	ldi	r30, 0x35	; 53
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	88 60       	ori	r24, 0x08	; 8
    373a:	8c 93       	st	X, r24
	SET_BIT(PORTC , KEYPAD_ROW3);
    373c:	a5 e3       	ldi	r26, 0x35	; 53
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	e5 e3       	ldi	r30, 0x35	; 53
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	84 60       	ori	r24, 0x04	; 4
    3748:	8c 93       	st	X, r24

	DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN0 , DIO_PIN_HIGH);
    374a:	83 e0       	ldi	r24, 0x03	; 3
    374c:	67 e0       	ldi	r22, 0x07	; 7
    374e:	41 e0       	ldi	r20, 0x01	; 1
    3750:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN1 , DIO_PIN_HIGH);
    3754:	83 e0       	ldi	r24, 0x03	; 3
    3756:	66 e0       	ldi	r22, 0x06	; 6
    3758:	41 e0       	ldi	r20, 0x01	; 1
    375a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN2 , DIO_PIN_HIGH);
    375e:	83 e0       	ldi	r24, 0x03	; 3
    3760:	64 e0       	ldi	r22, 0x04	; 4
    3762:	41 e0       	ldi	r20, 0x01	; 1
    3764:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN3 , DIO_PIN_HIGH);
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	63 e0       	ldi	r22, 0x03	; 3
    376c:	41 e0       	ldi	r20, 0x01	; 1
    376e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>

}
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <KeyPad_GetValue>:

u8 KeyPad_GetValue(void)
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	62 97       	sbiw	r28, 0x12	; 18
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
	u8 Col_Loc = 0;
    378c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Row_Loc = 0;
    378e:	18 8a       	std	Y+16, r1	; 0x10

	u8 Value = NOTKEY;
    3790:	84 e5       	ldi	r24, 0x54	; 84
    3792:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Temp = 0;
    3794:	1a 8a       	std	Y+18, r1	; 0x12





	for(Col_Loc = COL_INIT ; Col_Loc >= COL_FINAL ; Col_Loc--)
    3796:	87 e0       	ldi	r24, 0x07	; 7
    3798:	89 8b       	std	Y+17, r24	; 0x11
    379a:	e3 c0       	rjmp	.+454    	; 0x3962 <KeyPad_GetValue+0x1ea>
	{
		//Activate the column
		if (Col_Loc == 5)
    379c:	89 89       	ldd	r24, Y+17	; 0x11
    379e:	85 30       	cpi	r24, 0x05	; 5
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <KeyPad_GetValue+0x2c>
    37a2:	dc c0       	rjmp	.+440    	; 0x395c <KeyPad_GetValue+0x1e4>
		{
			continue;
		}
		DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , Col_Loc , DIO_PIN_LOW);
    37a4:	83 e0       	ldi	r24, 0x03	; 3
    37a6:	69 89       	ldd	r22, Y+17	; 0x11
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>

		for(Row_Loc = ROW_INIT ; Row_Loc >= ROW_FINAL ; Row_Loc--)
    37ae:	85 e0       	ldi	r24, 0x05	; 5
    37b0:	88 8b       	std	Y+16, r24	; 0x10
    37b2:	cb c0       	rjmp	.+406    	; 0x394a <KeyPad_GetValue+0x1d2>
		{

			DIO_voidGetPinValue(KEYPAD_ROW_PORT , Row_Loc,&Temp);
    37b4:	9e 01       	movw	r18, r28
    37b6:	2e 5e       	subi	r18, 0xEE	; 238
    37b8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ba:	82 e0       	ldi	r24, 0x02	; 2
    37bc:	68 89       	ldd	r22, Y+16	; 0x10
    37be:	a9 01       	movw	r20, r18
    37c0:	0e 94 06 18 	call	0x300c	; 0x300c <DIO_voidGetPinValue>

			//wait until the switch is releases
			if(!Temp)
    37c4:	8a 89       	ldd	r24, Y+18	; 0x12
    37c6:	88 23       	and	r24, r24
    37c8:	09 f0       	breq	.+2      	; 0x37cc <KeyPad_GetValue+0x54>
    37ca:	bc c0       	rjmp	.+376    	; 0x3944 <KeyPad_GetValue+0x1cc>
			{
				if(Col_Loc<5)
    37cc:	89 89       	ldd	r24, Y+17	; 0x11
    37ce:	85 30       	cpi	r24, 0x05	; 5
    37d0:	f0 f4       	brcc	.+60     	; 0x380e <KeyPad_GetValue+0x96>
				{
					Value =  KeyPad_Value[ROW_INIT - Row_Loc][COL_INIT - Col_Loc-1];
    37d2:	88 89       	ldd	r24, Y+16	; 0x10
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	85 e0       	ldi	r24, 0x05	; 5
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	ac 01       	movw	r20, r24
    37de:	42 1b       	sub	r20, r18
    37e0:	53 0b       	sbc	r21, r19
    37e2:	89 89       	ldd	r24, Y+17	; 0x11
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	86 e0       	ldi	r24, 0x06	; 6
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	bc 01       	movw	r22, r24
    37ee:	62 1b       	sub	r22, r18
    37f0:	73 0b       	sbc	r23, r19
    37f2:	9b 01       	movw	r18, r22
    37f4:	ca 01       	movw	r24, r20
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	82 0f       	add	r24, r18
    3800:	93 1f       	adc	r25, r19
    3802:	fc 01       	movw	r30, r24
    3804:	ed 54       	subi	r30, 0x4D	; 77
    3806:	fe 4f       	sbci	r31, 0xFE	; 254
    3808:	80 81       	ld	r24, Z
    380a:	8f 87       	std	Y+15, r24	; 0x0f
    380c:	26 c0       	rjmp	.+76     	; 0x385a <KeyPad_GetValue+0xe2>
				}
				else
				{
					Value =  KeyPad_Value[ROW_INIT - Row_Loc][COL_INIT - Col_Loc];
    380e:	88 89       	ldd	r24, Y+16	; 0x10
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	85 e0       	ldi	r24, 0x05	; 5
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	ac 01       	movw	r20, r24
    381a:	42 1b       	sub	r20, r18
    381c:	53 0b       	sbc	r21, r19
    381e:	89 89       	ldd	r24, Y+17	; 0x11
    3820:	28 2f       	mov	r18, r24
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	87 e0       	ldi	r24, 0x07	; 7
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	bc 01       	movw	r22, r24
    382a:	62 1b       	sub	r22, r18
    382c:	73 0b       	sbc	r23, r19
    382e:	9b 01       	movw	r18, r22
    3830:	ca 01       	movw	r24, r20
    3832:	88 0f       	add	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	82 0f       	add	r24, r18
    383c:	93 1f       	adc	r25, r19
    383e:	fc 01       	movw	r30, r24
    3840:	ed 54       	subi	r30, 0x4D	; 77
    3842:	fe 4f       	sbci	r31, 0xFE	; 254
    3844:	80 81       	ld	r24, Z
    3846:	8f 87       	std	Y+15, r24	; 0x0f
    3848:	08 c0       	rjmp	.+16     	; 0x385a <KeyPad_GetValue+0xe2>
				}


				while(!Temp)
				{
					DIO_voidGetPinValue(KEYPAD_ROW_PORT , Row_Loc,&Temp);
    384a:	9e 01       	movw	r18, r28
    384c:	2e 5e       	subi	r18, 0xEE	; 238
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	82 e0       	ldi	r24, 0x02	; 2
    3852:	68 89       	ldd	r22, Y+16	; 0x10
    3854:	a9 01       	movw	r20, r18
    3856:	0e 94 06 18 	call	0x300c	; 0x300c <DIO_voidGetPinValue>
				{
					Value =  KeyPad_Value[ROW_INIT - Row_Loc][COL_INIT - Col_Loc];
				}


				while(!Temp)
    385a:	8a 89       	ldd	r24, Y+18	; 0x12
    385c:	88 23       	and	r24, r24
    385e:	a9 f3       	breq	.-22     	; 0x384a <KeyPad_GetValue+0xd2>
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	a0 e2       	ldi	r26, 0x20	; 32
    3866:	b1 e4       	ldi	r27, 0x41	; 65
    3868:	8b 87       	std	Y+11, r24	; 0x0b
    386a:	9c 87       	std	Y+12, r25	; 0x0c
    386c:	ad 87       	std	Y+13, r26	; 0x0d
    386e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3870:	6b 85       	ldd	r22, Y+11	; 0x0b
    3872:	7c 85       	ldd	r23, Y+12	; 0x0c
    3874:	8d 85       	ldd	r24, Y+13	; 0x0d
    3876:	9e 85       	ldd	r25, Y+14	; 0x0e
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	4a e7       	ldi	r20, 0x7A	; 122
    387e:	55 e4       	ldi	r21, 0x45	; 69
    3880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	8f 83       	std	Y+7, r24	; 0x07
    388a:	98 87       	std	Y+8, r25	; 0x08
    388c:	a9 87       	std	Y+9, r26	; 0x09
    388e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3890:	6f 81       	ldd	r22, Y+7	; 0x07
    3892:	78 85       	ldd	r23, Y+8	; 0x08
    3894:	89 85       	ldd	r24, Y+9	; 0x09
    3896:	9a 85       	ldd	r25, Y+10	; 0x0a
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	40 e8       	ldi	r20, 0x80	; 128
    389e:	5f e3       	ldi	r21, 0x3F	; 63
    38a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a4:	88 23       	and	r24, r24
    38a6:	2c f4       	brge	.+10     	; 0x38b2 <KeyPad_GetValue+0x13a>
		__ticks = 1;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	9e 83       	std	Y+6, r25	; 0x06
    38ae:	8d 83       	std	Y+5, r24	; 0x05
    38b0:	3f c0       	rjmp	.+126    	; 0x3930 <KeyPad_GetValue+0x1b8>
	else if (__tmp > 65535)
    38b2:	6f 81       	ldd	r22, Y+7	; 0x07
    38b4:	78 85       	ldd	r23, Y+8	; 0x08
    38b6:	89 85       	ldd	r24, Y+9	; 0x09
    38b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	4f e7       	ldi	r20, 0x7F	; 127
    38c0:	57 e4       	ldi	r21, 0x47	; 71
    38c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c6:	18 16       	cp	r1, r24
    38c8:	4c f5       	brge	.+82     	; 0x391c <KeyPad_GetValue+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    38cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    38f2:	0f c0       	rjmp	.+30     	; 0x3912 <KeyPad_GetValue+0x19a>
    38f4:	80 e9       	ldi	r24, 0x90	; 144
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
    38fc:	8b 81       	ldd	r24, Y+3	; 0x03
    38fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <KeyPad_GetValue+0x188>
    3904:	9c 83       	std	Y+4, r25	; 0x04
    3906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3908:	8d 81       	ldd	r24, Y+5	; 0x05
    390a:	9e 81       	ldd	r25, Y+6	; 0x06
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	9e 83       	std	Y+6, r25	; 0x06
    3910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	69 f7       	brne	.-38     	; 0x38f4 <KeyPad_GetValue+0x17c>
    391a:	14 c0       	rjmp	.+40     	; 0x3944 <KeyPad_GetValue+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	9e 83       	std	Y+6, r25	; 0x06
    392e:	8d 83       	std	Y+5, r24	; 0x05
    3930:	8d 81       	ldd	r24, Y+5	; 0x05
    3932:	9e 81       	ldd	r25, Y+6	; 0x06
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	9a 81       	ldd	r25, Y+2	; 0x02
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <KeyPad_GetValue+0x1c4>
    3940:	9a 83       	std	Y+2, r25	; 0x02
    3942:	89 83       	std	Y+1, r24	; 0x01
		{
			continue;
		}
		DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , Col_Loc , DIO_PIN_LOW);

		for(Row_Loc = ROW_INIT ; Row_Loc >= ROW_FINAL ; Row_Loc--)
    3944:	88 89       	ldd	r24, Y+16	; 0x10
    3946:	81 50       	subi	r24, 0x01	; 1
    3948:	88 8b       	std	Y+16, r24	; 0x10
    394a:	88 89       	ldd	r24, Y+16	; 0x10
    394c:	82 30       	cpi	r24, 0x02	; 2
    394e:	08 f0       	brcs	.+2      	; 0x3952 <KeyPad_GetValue+0x1da>
    3950:	31 cf       	rjmp	.-414    	; 0x37b4 <KeyPad_GetValue+0x3c>
			}

		}

		//deactivate column again
		DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , Col_Loc , DIO_PIN_HIGH);
    3952:	83 e0       	ldi	r24, 0x03	; 3
    3954:	69 89       	ldd	r22, Y+17	; 0x11
    3956:	41 e0       	ldi	r20, 0x01	; 1
    3958:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>





	for(Col_Loc = COL_INIT ; Col_Loc >= COL_FINAL ; Col_Loc--)
    395c:	89 89       	ldd	r24, Y+17	; 0x11
    395e:	81 50       	subi	r24, 0x01	; 1
    3960:	89 8b       	std	Y+17, r24	; 0x11
    3962:	89 89       	ldd	r24, Y+17	; 0x11
    3964:	83 30       	cpi	r24, 0x03	; 3
    3966:	08 f0       	brcs	.+2      	; 0x396a <KeyPad_GetValue+0x1f2>
    3968:	19 cf       	rjmp	.-462    	; 0x379c <KeyPad_GetValue+0x24>
		//deactivate column again
		DIO_voidSetPinValue(KEYPAD_COLUMN_PORT , Col_Loc , DIO_PIN_HIGH);

	}

	return Value ;
    396a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    396c:	62 96       	adiw	r28, 0x12	; 18
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <PROJECT_voidInit>:
#include "util/delay.h"


u16 NUM = 0;
void PROJECT_voidInit(void)
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
	KeyPad_Init();
    3986:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <KeyPad_Init>
	CLCD_voidInit();
    398a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_voidInit>
	SERVO_voidInit();
    398e:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <SERVO_voidInit>
	DIO_voidSetPinDirection(LED_PORT, LED_PIN, DIO_PORT_OUTPUT);
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	65 e0       	ldi	r22, 0x05	; 5
    3996:	4f ef       	ldi	r20, 0xFF	; 255
    3998:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(BUZ_PORT, BUZ_PIN, DIO_PORT_OUTPUT);
    399c:	82 e0       	ldi	r24, 0x02	; 2
    399e:	66 e0       	ldi	r22, 0x06	; 6
    39a0:	4f ef       	ldi	r20, 0xFF	; 255
    39a2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
}
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	08 95       	ret

000039ac <PROJECT_voidStart>:

void PROJECT_voidStart(void)
{
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	2f 97       	sbiw	r28, 0x0f	; 15
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
	u8 Trails_Count = 0;
    39c0:	1f 86       	std	Y+15, r1	; 0x0f
    39c2:	95 c0       	rjmp	.+298    	; 0x3aee <PROJECT_voidStart+0x142>

	while(Trails_Count < Max_Trials_num)
	{
		CLCD_voidSendString("Enter the Password: ");
    39c4:	80 e6       	ldi	r24, 0x60	; 96
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <CLCD_voidSendString>
		PROJECT_voidWritePass();
    39cc:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <PROJECT_voidWritePass>

		if(NUM == Password)
    39d0:	80 91 c4 01 	lds	r24, 0x01C4
    39d4:	90 91 c5 01 	lds	r25, 0x01C5
    39d8:	20 e3       	ldi	r18, 0x30	; 48
    39da:	89 33       	cpi	r24, 0x39	; 57
    39dc:	92 07       	cpc	r25, r18
    39de:	51 f4       	brne	.+20     	; 0x39f4 <PROJECT_voidStart+0x48>
		{
			CLCD_voidClear();
    39e0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <CLCD_voidClear>
			CLCD_voidSendString(" ***DOOR OPENED***");
    39e4:	85 e7       	ldi	r24, 0x75	; 117
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <CLCD_voidSendString>
			SERVO_voidStart(90);
    39ec:	8a e5       	ldi	r24, 0x5A	; 90
    39ee:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <SERVO_voidStart>
    39f2:	81 c0       	rjmp	.+258    	; 0x3af6 <PROJECT_voidStart+0x14a>
			break;
		}
		else
		{
			Trails_Count++;
    39f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f6:	8f 5f       	subi	r24, 0xFF	; 255
    39f8:	8f 87       	std	Y+15, r24	; 0x0f
			CLCD_voidClear();
    39fa:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <CLCD_voidClear>
			CLCD_voidSendString("  PASS NOT CORRECT");
    39fe:	88 e8       	ldi	r24, 0x88	; 136
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <CLCD_voidSendString>
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	aa e7       	ldi	r26, 0x7A	; 122
    3a0c:	b4 e4       	ldi	r27, 0x44	; 68
    3a0e:	8b 87       	std	Y+11, r24	; 0x0b
    3a10:	9c 87       	std	Y+12, r25	; 0x0c
    3a12:	ad 87       	std	Y+13, r26	; 0x0d
    3a14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a e7       	ldi	r20, 0x7A	; 122
    3a24:	55 e4       	ldi	r21, 0x45	; 69
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	8f 83       	std	Y+7, r24	; 0x07
    3a30:	98 87       	std	Y+8, r25	; 0x08
    3a32:	a9 87       	std	Y+9, r26	; 0x09
    3a34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a36:	6f 81       	ldd	r22, Y+7	; 0x07
    3a38:	78 85       	ldd	r23, Y+8	; 0x08
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e8       	ldi	r20, 0x80	; 128
    3a44:	5f e3       	ldi	r21, 0x3F	; 63
    3a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4a:	88 23       	and	r24, r24
    3a4c:	2c f4       	brge	.+10     	; 0x3a58 <PROJECT_voidStart+0xac>
		__ticks = 1;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	3f c0       	rjmp	.+126    	; 0x3ad6 <PROJECT_voidStart+0x12a>
	else if (__tmp > 65535)
    3a58:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5a:	78 85       	ldd	r23, Y+8	; 0x08
    3a5c:	89 85       	ldd	r24, Y+9	; 0x09
    3a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	3f ef       	ldi	r19, 0xFF	; 255
    3a64:	4f e7       	ldi	r20, 0x7F	; 127
    3a66:	57 e4       	ldi	r21, 0x47	; 71
    3a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a6c:	18 16       	cp	r1, r24
    3a6e:	4c f5       	brge	.+82     	; 0x3ac2 <PROJECT_voidStart+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e2       	ldi	r20, 0x20	; 32
    3a7e:	51 e4       	ldi	r21, 0x41	; 65
    3a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9e 83       	std	Y+6, r25	; 0x06
    3a96:	8d 83       	std	Y+5, r24	; 0x05
    3a98:	0f c0       	rjmp	.+30     	; 0x3ab8 <PROJECT_voidStart+0x10c>
    3a9a:	80 e9       	ldi	r24, 0x90	; 144
    3a9c:	91 e0       	ldi	r25, 0x01	; 1
    3a9e:	9c 83       	std	Y+4, r25	; 0x04
    3aa0:	8b 83       	std	Y+3, r24	; 0x03
    3aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	f1 f7       	brne	.-4      	; 0x3aa6 <PROJECT_voidStart+0xfa>
    3aaa:	9c 83       	std	Y+4, r25	; 0x04
    3aac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aae:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	9e 81       	ldd	r25, Y+6	; 0x06
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	69 f7       	brne	.-38     	; 0x3a9a <PROJECT_voidStart+0xee>
    3ac0:	14 c0       	rjmp	.+40     	; 0x3aea <PROJECT_voidStart+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac4:	78 85       	ldd	r23, Y+8	; 0x08
    3ac6:	89 85       	ldd	r24, Y+9	; 0x09
    3ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	9e 83       	std	Y+6, r25	; 0x06
    3ad4:	8d 83       	std	Y+5, r24	; 0x05
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ada:	9a 83       	std	Y+2, r25	; 0x02
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <PROJECT_voidStart+0x136>
    3ae6:	9a 83       	std	Y+2, r25	; 0x02
    3ae8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			CLCD_voidClear();
    3aea:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <CLCD_voidClear>

void PROJECT_voidStart(void)
{
	u8 Trails_Count = 0;

	while(Trails_Count < Max_Trials_num)
    3aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af0:	83 30       	cpi	r24, 0x03	; 3
    3af2:	08 f4       	brcc	.+2      	; 0x3af6 <PROJECT_voidStart+0x14a>
    3af4:	67 cf       	rjmp	.-306    	; 0x39c4 <PROJECT_voidStart+0x18>
			CLCD_voidSendString("  PASS NOT CORRECT");
			_delay_ms(1000);
			CLCD_voidClear();
		}
	}
	if (Trails_Count == Max_Trials_num)
    3af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af8:	83 30       	cpi	r24, 0x03	; 3
    3afa:	11 f4       	brne	.+4      	; 0x3b00 <PROJECT_voidStart+0x154>
	{
		PROJECT_voidStop();
    3afc:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <PROJECT_voidStop>
	}
}
    3b00:	2f 96       	adiw	r28, 0x0f	; 15
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <PROJECT_voidWritePass>:

void PROJECT_voidWritePass(void)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	63 97       	sbiw	r28, 0x13	; 19
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
	u8 copy_u8Pass, COUNTER = 0, local_u8CNT = 0;
    3b26:	1a 8a       	std	Y+18, r1	; 0x12
    3b28:	19 8a       	std	Y+17, r1	; 0x11
	u16 temp = 0;
    3b2a:	18 8a       	std	Y+16, r1	; 0x10
    3b2c:	1f 86       	std	Y+15, r1	; 0x0f
    3b2e:	9d c0       	rjmp	.+314    	; 0x3c6a <PROJECT_voidWritePass+0x158>

	while(local_u8CNT < Pass_nums)
	{
		copy_u8Pass = KeyPad_GetValue();
    3b30:	0e 94 bc 1b 	call	0x3778	; 0x3778 <KeyPad_GetValue>
    3b34:	8b 8b       	std	Y+19, r24	; 0x13
		if (copy_u8Pass != NOTKEY)
    3b36:	8b 89       	ldd	r24, Y+19	; 0x13
    3b38:	84 35       	cpi	r24, 0x54	; 84
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <PROJECT_voidWritePass+0x2c>
    3b3c:	96 c0       	rjmp	.+300    	; 0x3c6a <PROJECT_voidWritePass+0x158>
		{
			CLCD_voidSendData(copy_u8Pass);
    3b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b40:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	a6 e9       	ldi	r26, 0x96	; 150
    3b4a:	b3 e4       	ldi	r27, 0x43	; 67
    3b4c:	8b 87       	std	Y+11, r24	; 0x0b
    3b4e:	9c 87       	std	Y+12, r25	; 0x0c
    3b50:	ad 87       	std	Y+13, r26	; 0x0d
    3b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	4a e7       	ldi	r20, 0x7A	; 122
    3b62:	55 e4       	ldi	r21, 0x45	; 69
    3b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	8f 83       	std	Y+7, r24	; 0x07
    3b6e:	98 87       	std	Y+8, r25	; 0x08
    3b70:	a9 87       	std	Y+9, r26	; 0x09
    3b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b74:	6f 81       	ldd	r22, Y+7	; 0x07
    3b76:	78 85       	ldd	r23, Y+8	; 0x08
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e8       	ldi	r20, 0x80	; 128
    3b82:	5f e3       	ldi	r21, 0x3F	; 63
    3b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b88:	88 23       	and	r24, r24
    3b8a:	2c f4       	brge	.+10     	; 0x3b96 <PROJECT_voidWritePass+0x84>
		__ticks = 1;
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	9e 83       	std	Y+6, r25	; 0x06
    3b92:	8d 83       	std	Y+5, r24	; 0x05
    3b94:	3f c0       	rjmp	.+126    	; 0x3c14 <PROJECT_voidWritePass+0x102>
	else if (__tmp > 65535)
    3b96:	6f 81       	ldd	r22, Y+7	; 0x07
    3b98:	78 85       	ldd	r23, Y+8	; 0x08
    3b9a:	89 85       	ldd	r24, Y+9	; 0x09
    3b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	3f ef       	ldi	r19, 0xFF	; 255
    3ba2:	4f e7       	ldi	r20, 0x7F	; 127
    3ba4:	57 e4       	ldi	r21, 0x47	; 71
    3ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3baa:	18 16       	cp	r1, r24
    3bac:	4c f5       	brge	.+82     	; 0x3c00 <PROJECT_voidWritePass+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e2       	ldi	r20, 0x20	; 32
    3bbc:	51 e4       	ldi	r21, 0x41	; 65
    3bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	cd 01       	movw	r24, r26
    3bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	9e 83       	std	Y+6, r25	; 0x06
    3bd4:	8d 83       	std	Y+5, r24	; 0x05
    3bd6:	0f c0       	rjmp	.+30     	; 0x3bf6 <PROJECT_voidWritePass+0xe4>
    3bd8:	80 e9       	ldi	r24, 0x90	; 144
    3bda:	91 e0       	ldi	r25, 0x01	; 1
    3bdc:	9c 83       	std	Y+4, r25	; 0x04
    3bde:	8b 83       	std	Y+3, r24	; 0x03
    3be0:	8b 81       	ldd	r24, Y+3	; 0x03
    3be2:	9c 81       	ldd	r25, Y+4	; 0x04
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	f1 f7       	brne	.-4      	; 0x3be4 <PROJECT_voidWritePass+0xd2>
    3be8:	9c 83       	std	Y+4, r25	; 0x04
    3bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bec:	8d 81       	ldd	r24, Y+5	; 0x05
    3bee:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	9e 83       	std	Y+6, r25	; 0x06
    3bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	69 f7       	brne	.-38     	; 0x3bd8 <PROJECT_voidWritePass+0xc6>
    3bfe:	14 c0       	rjmp	.+40     	; 0x3c28 <PROJECT_voidWritePass+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c00:	6f 81       	ldd	r22, Y+7	; 0x07
    3c02:	78 85       	ldd	r23, Y+8	; 0x08
    3c04:	89 85       	ldd	r24, Y+9	; 0x09
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	9e 83       	std	Y+6, r25	; 0x06
    3c12:	8d 83       	std	Y+5, r24	; 0x05
    3c14:	8d 81       	ldd	r24, Y+5	; 0x05
    3c16:	9e 81       	ldd	r25, Y+6	; 0x06
    3c18:	9a 83       	std	Y+2, r25	; 0x02
    3c1a:	89 83       	std	Y+1, r24	; 0x01
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	f1 f7       	brne	.-4      	; 0x3c20 <PROJECT_voidWritePass+0x10e>
    3c24:	9a 83       	std	Y+2, r25	; 0x02
    3c26:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			CLCD_voidGoToPosition(2, COUNTER);
    3c28:	82 e0       	ldi	r24, 0x02	; 2
    3c2a:	6a 89       	ldd	r22, Y+18	; 0x12
    3c2c:	0e 94 96 14 	call	0x292c	; 0x292c <CLCD_voidGoToPosition>
			CLCD_voidSendData('*');
    3c30:	8a e2       	ldi	r24, 0x2A	; 42
    3c32:	0e 94 92 09 	call	0x1324	; 0x1324 <CLCD_voidSendData>
			COUNTER++;
    3c36:	8a 89       	ldd	r24, Y+18	; 0x12
    3c38:	8f 5f       	subi	r24, 0xFF	; 255
    3c3a:	8a 8b       	std	Y+18, r24	; 0x12
			local_u8CNT++;
    3c3c:	89 89       	ldd	r24, Y+17	; 0x11
    3c3e:	8f 5f       	subi	r24, 0xFF	; 255
    3c40:	89 8b       	std	Y+17, r24	; 0x11
			temp = temp *10 + copy_u8Pass - '0';
    3c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c44:	98 89       	ldd	r25, Y+16	; 0x10
    3c46:	9c 01       	movw	r18, r24
    3c48:	22 0f       	add	r18, r18
    3c4a:	33 1f       	adc	r19, r19
    3c4c:	c9 01       	movw	r24, r18
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	28 0f       	add	r18, r24
    3c58:	39 1f       	adc	r19, r25
    3c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5c:	88 2f       	mov	r24, r24
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	c0 97       	sbiw	r24, 0x30	; 48
    3c66:	98 8b       	std	Y+16, r25	; 0x10
    3c68:	8f 87       	std	Y+15, r24	; 0x0f
void PROJECT_voidWritePass(void)
{
	u8 copy_u8Pass, COUNTER = 0, local_u8CNT = 0;
	u16 temp = 0;

	while(local_u8CNT < Pass_nums)
    3c6a:	89 89       	ldd	r24, Y+17	; 0x11
    3c6c:	85 30       	cpi	r24, 0x05	; 5
    3c6e:	08 f4       	brcc	.+2      	; 0x3c72 <PROJECT_voidWritePass+0x160>
    3c70:	5f cf       	rjmp	.-322    	; 0x3b30 <PROJECT_voidWritePass+0x1e>
			COUNTER++;
			local_u8CNT++;
			temp = temp *10 + copy_u8Pass - '0';
		}
	}
	NUM = temp;
    3c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c74:	98 89       	ldd	r25, Y+16	; 0x10
    3c76:	90 93 c5 01 	sts	0x01C5, r25
    3c7a:	80 93 c4 01 	sts	0x01C4, r24
	temp = 0;
    3c7e:	18 8a       	std	Y+16, r1	; 0x10
    3c80:	1f 86       	std	Y+15, r1	; 0x0f
}
    3c82:	63 96       	adiw	r28, 0x13	; 19
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	08 95       	ret

00003c94 <PROJECT_voidStop>:

void PROJECT_voidStop(void)
{
    3c94:	df 93       	push	r29
    3c96:	cf 93       	push	r28
    3c98:	cd b7       	in	r28, 0x3d	; 61
    3c9a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(LED_PORT, LED_PIN, DIO_PIN_HIGH);
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	65 e0       	ldi	r22, 0x05	; 5
    3ca0:	41 e0       	ldi	r20, 0x01	; 1
    3ca2:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(BUZ_PORT, BUZ_PIN, DIO_PIN_HIGH);
    3ca6:	82 e0       	ldi	r24, 0x02	; 2
    3ca8:	66 e0       	ldi	r22, 0x06	; 6
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <DIO_voidSetPinValue>

	CLCD_voidClear();
    3cb0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <CLCD_voidClear>
	CLCD_voidGoToPosition(2, 2);
    3cb4:	82 e0       	ldi	r24, 0x02	; 2
    3cb6:	62 e0       	ldi	r22, 0x02	; 2
    3cb8:	0e 94 96 14 	call	0x292c	; 0x292c <CLCD_voidGoToPosition>
	CLCD_voidSendString("TRY AGAIN LATER");
    3cbc:	8b e9       	ldi	r24, 0x9B	; 155
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <CLCD_voidSendString>
}
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	08 95       	ret

00003cca <PWM_voidInitChannel_0>:
#include "PWM_interface.h"


/*****************************************TMR0*****************************************/
void PWM_voidInitChannel_0(void)
{
    3cca:	df 93       	push	r29
    3ccc:	cf 93       	push	r28
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
	//SELECT FAST PWM
	SET_BIT(TCCR0_REG, WGM00);
    3cd2:	a3 e5       	ldi	r26, 0x53	; 83
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	e3 e5       	ldi	r30, 0x53	; 83
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	80 81       	ld	r24, Z
    3cdc:	80 64       	ori	r24, 0x40	; 64
    3cde:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, WGM01);
    3ce0:	a3 e5       	ldi	r26, 0x53	; 83
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	e3 e5       	ldi	r30, 0x53	; 83
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
    3cea:	88 60       	ori	r24, 0x08	; 8
    3cec:	8c 93       	st	X, r24

	//SELECT NON INVERTING
	CLR_BIT(TCCR0_REG, COM00);
    3cee:	a3 e5       	ldi	r26, 0x53	; 83
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	e3 e5       	ldi	r30, 0x53	; 83
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	80 81       	ld	r24, Z
    3cf8:	8f 7e       	andi	r24, 0xEF	; 239
    3cfa:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, COM01);
    3cfc:	a3 e5       	ldi	r26, 0x53	; 83
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	e3 e5       	ldi	r30, 0x53	; 83
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	80 62       	ori	r24, 0x20	; 32
    3d08:	8c 93       	st	X, r24
}
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	08 95       	ret

00003d10 <PWM_voidGenerate_PWM_Channel_0>:

void PWM_voidGenerate_PWM_Channel_0(u8 copy_u8DutyCycle)
{
    3d10:	df 93       	push	r29
    3d12:	cf 93       	push	r28
    3d14:	00 d0       	rcall	.+0      	; 0x3d16 <PWM_voidGenerate_PWM_Channel_0+0x6>
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = true;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8DutyCycle <= 100)
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	85 36       	cpi	r24, 0x65	; 101
    3d24:	28 f5       	brcc	.+74     	; 0x3d70 <PWM_voidGenerate_PWM_Channel_0+0x60>
	{
		OCR0_REG = (((u16)copy_u8DutyCycle*256)/100)-1;
    3d26:	ec e5       	ldi	r30, 0x5C	; 92
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	88 2f       	mov	r24, r24
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	98 2f       	mov	r25, r24
    3d32:	88 27       	eor	r24, r24
    3d34:	24 e6       	ldi	r18, 0x64	; 100
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	b9 01       	movw	r22, r18
    3d3a:	0e 94 08 20 	call	0x4010	; 0x4010 <__udivmodhi4>
    3d3e:	cb 01       	movw	r24, r22
    3d40:	81 50       	subi	r24, 0x01	; 1
    3d42:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,  CS00);
		CLR_BIT(TCCR0_REG,  CS01);
		SET_BIT(TCCR0_REG,  CS02);

#elif PWM0_PRESCALER == PWM_PRESCALER_1024
		SET_BIT(TCCR0_REG,  CS00);
    3d44:	a3 e5       	ldi	r26, 0x53	; 83
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	e3 e5       	ldi	r30, 0x53	; 83
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	81 60       	ori	r24, 0x01	; 1
    3d50:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,  CS01);
    3d52:	a3 e5       	ldi	r26, 0x53	; 83
    3d54:	b0 e0       	ldi	r27, 0x00	; 0
    3d56:	e3 e5       	ldi	r30, 0x53	; 83
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	80 81       	ld	r24, Z
    3d5c:	8d 7f       	andi	r24, 0xFD	; 253
    3d5e:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,  CS02);
    3d60:	a3 e5       	ldi	r26, 0x53	; 83
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	e3 e5       	ldi	r30, 0x53	; 83
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	80 81       	ld	r24, Z
    3d6a:	84 60       	ori	r24, 0x04	; 4
    3d6c:	8c 93       	st	X, r24
    3d6e:	01 c0       	rjmp	.+2      	; 0x3d72 <PWM_voidGenerate_PWM_Channel_0+0x62>
#endif
	}
	else
	{
		//return error state
		Local_u8ErrorState = false;
    3d70:	19 82       	std	Y+1, r1	; 0x01
	}
}
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	cf 91       	pop	r28
    3d78:	df 91       	pop	r29
    3d7a:	08 95       	ret

00003d7c <PWM_voidStopChannel_0>:

void PWM_voidStopChannel_0(void)
{
    3d7c:	df 93       	push	r29
    3d7e:	cf 93       	push	r28
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,  CS00);
    3d84:	a3 e5       	ldi	r26, 0x53	; 83
    3d86:	b0 e0       	ldi	r27, 0x00	; 0
    3d88:	e3 e5       	ldi	r30, 0x53	; 83
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	80 81       	ld	r24, Z
    3d8e:	8e 7f       	andi	r24, 0xFE	; 254
    3d90:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,  CS01);
    3d92:	a3 e5       	ldi	r26, 0x53	; 83
    3d94:	b0 e0       	ldi	r27, 0x00	; 0
    3d96:	e3 e5       	ldi	r30, 0x53	; 83
    3d98:	f0 e0       	ldi	r31, 0x00	; 0
    3d9a:	80 81       	ld	r24, Z
    3d9c:	8d 7f       	andi	r24, 0xFD	; 253
    3d9e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,  CS02);
    3da0:	a3 e5       	ldi	r26, 0x53	; 83
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	e3 e5       	ldi	r30, 0x53	; 83
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	8b 7f       	andi	r24, 0xFB	; 251
    3dac:	8c 93       	st	X, r24
}
    3dae:	cf 91       	pop	r28
    3db0:	df 91       	pop	r29
    3db2:	08 95       	ret

00003db4 <PWM_voidInitChannel_1A>:


/*****************************************TMR1*****************************************/
void PWM_voidInitChannel_1A(void)
{
    3db4:	df 93       	push	r29
    3db6:	cf 93       	push	r28
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
	//SELECT FAST PWM
	CLR_BIT(TCCR1A_REG, WGM10);
    3dbc:	af e4       	ldi	r26, 0x4F	; 79
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	ef e4       	ldi	r30, 0x4F	; 79
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	80 81       	ld	r24, Z
    3dc6:	8e 7f       	andi	r24, 0xFE	; 254
    3dc8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG, WGM11);
    3dca:	af e4       	ldi	r26, 0x4F	; 79
    3dcc:	b0 e0       	ldi	r27, 0x00	; 0
    3dce:	ef e4       	ldi	r30, 0x4F	; 79
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	80 81       	ld	r24, Z
    3dd4:	82 60       	ori	r24, 0x02	; 2
    3dd6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG, WGM12);
    3dd8:	ae e4       	ldi	r26, 0x4E	; 78
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	ee e4       	ldi	r30, 0x4E	; 78
    3dde:	f0 e0       	ldi	r31, 0x00	; 0
    3de0:	80 81       	ld	r24, Z
    3de2:	88 60       	ori	r24, 0x08	; 8
    3de4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG, WGM13);
    3de6:	ae e4       	ldi	r26, 0x4E	; 78
    3de8:	b0 e0       	ldi	r27, 0x00	; 0
    3dea:	ee e4       	ldi	r30, 0x4E	; 78
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	80 81       	ld	r24, Z
    3df0:	80 61       	ori	r24, 0x10	; 16
    3df2:	8c 93       	st	X, r24

	//SELECT NON INVERTING
	CLR_BIT(TCCR1A_REG, COM1A0);
    3df4:	af e4       	ldi	r26, 0x4F	; 79
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	ef e4       	ldi	r30, 0x4F	; 79
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8f 7b       	andi	r24, 0xBF	; 191
    3e00:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG, COM1A1);
    3e02:	af e4       	ldi	r26, 0x4F	; 79
    3e04:	b0 e0       	ldi	r27, 0x00	; 0
    3e06:	ef e4       	ldi	r30, 0x4F	; 79
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 81       	ld	r24, Z
    3e0c:	80 68       	ori	r24, 0x80	; 128
    3e0e:	8c 93       	st	X, r24
}
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <PWM_voidGenerate_PWM_Channel_1A>:

void PWM_voidGenerate_PWM_Channel_1A(u32 copy_u32Frequancey_hz ,f32 copy_f32DutyCycle)
{
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	df 93       	push	r29
    3e1c:	cf 93       	push	r28
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	27 97       	sbiw	r28, 0x07	; 7
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	9b 83       	std	Y+3, r25	; 0x03
    3e30:	8a 83       	std	Y+2, r24	; 0x02
    3e32:	4c 83       	std	Y+4, r20	; 0x04
    3e34:	5d 83       	std	Y+5, r21	; 0x05
    3e36:	6e 83       	std	Y+6, r22	; 0x06
    3e38:	7f 83       	std	Y+7, r23	; 0x07
	u8 Local_u8ErrorState = true;
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_f32DutyCycle <= 100)
    3e3e:	6c 81       	ldd	r22, Y+4	; 0x04
    3e40:	7d 81       	ldd	r23, Y+5	; 0x05
    3e42:	8e 81       	ldd	r24, Y+6	; 0x06
    3e44:	9f 81       	ldd	r25, Y+7	; 0x07
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	48 ec       	ldi	r20, 0xC8	; 200
    3e4c:	52 e4       	ldi	r21, 0x42	; 66
    3e4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3e52:	18 16       	cp	r1, r24
    3e54:	0c f4       	brge	.+2      	; 0x3e58 <PWM_voidGenerate_PWM_Channel_1A+0x42>
    3e56:	62 c0       	rjmp	.+196    	; 0x3f1c <PWM_voidGenerate_PWM_Channel_1A+0x106>
	{
		//under condition tick time = 4us
		ICR1L_REG = ((1000000UL/copy_u32Frequancey_hz)/4)-1;
    3e58:	06 e4       	ldi	r16, 0x46	; 70
    3e5a:	10 e0       	ldi	r17, 0x00	; 0
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e60:	9c 01       	movw	r18, r24
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	80 e9       	ldi	r24, 0x90	; 144
    3e68:	90 ed       	ldi	r25, 0xD0	; 208
    3e6a:	a3 e0       	ldi	r26, 0x03	; 3
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	bc 01       	movw	r22, r24
    3e70:	cd 01       	movw	r24, r26
    3e72:	0e 94 2f 20 	call	0x405e	; 0x405e <__udivmodsi4>
    3e76:	da 01       	movw	r26, r20
    3e78:	c9 01       	movw	r24, r18
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f8 01       	movw	r30, r16
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24

		OCR1AL_REG = ((copy_f32DutyCycle*(ICR1L_REG+1))/100)-1;
    3e82:	0a e4       	ldi	r16, 0x4A	; 74
    3e84:	10 e0       	ldi	r17, 0x00	; 0
    3e86:	e6 e4       	ldi	r30, 0x46	; 70
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	cc 01       	movw	r24, r24
    3e92:	a0 e0       	ldi	r26, 0x00	; 0
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	bc 01       	movw	r22, r24
    3ea4:	cd 01       	movw	r24, r26
    3ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    3eaa:	4e 81       	ldd	r20, Y+6	; 0x06
    3eac:	5f 81       	ldd	r21, Y+7	; 0x07
    3eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	bc 01       	movw	r22, r24
    3eb8:	cd 01       	movw	r24, r26
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	48 ec       	ldi	r20, 0xC8	; 200
    3ec0:	52 e4       	ldi	r21, 0x42	; 66
    3ec2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e8       	ldi	r20, 0x80	; 128
    3ed4:	5f e3       	ldi	r21, 0x3F	; 63
    3ed6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	bc 01       	movw	r22, r24
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	f8 01       	movw	r30, r16
    3eec:	91 83       	std	Z+1, r25	; 0x01
    3eee:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG, CS10);
		SET_BIT(TCCR1B_REG, CS11);
		CLR_BIT(TCCR1B_REG, CS12);

#elif PWM1A_PRESCALER == PWM1A_PRESCALER_64
		SET_BIT(TCCR1B_REG, CS10);
    3ef0:	ae e4       	ldi	r26, 0x4E	; 78
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	ee e4       	ldi	r30, 0x4E	; 78
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	81 60       	ori	r24, 0x01	; 1
    3efc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, CS11);
    3efe:	ae e4       	ldi	r26, 0x4E	; 78
    3f00:	b0 e0       	ldi	r27, 0x00	; 0
    3f02:	ee e4       	ldi	r30, 0x4E	; 78
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	80 81       	ld	r24, Z
    3f08:	82 60       	ori	r24, 0x02	; 2
    3f0a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, CS12);
    3f0c:	ae e4       	ldi	r26, 0x4E	; 78
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	ee e4       	ldi	r30, 0x4E	; 78
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	80 81       	ld	r24, Z
    3f16:	8b 7f       	andi	r24, 0xFB	; 251
    3f18:	8c 93       	st	X, r24
    3f1a:	01 c0       	rjmp	.+2      	; 0x3f1e <PWM_voidGenerate_PWM_Channel_1A+0x108>
#endif
	}
	else
	{
		//return error state
		Local_u8ErrorState = false;
    3f1c:	19 82       	std	Y+1, r1	; 0x01
	}
}
    3f1e:	27 96       	adiw	r28, 0x07	; 7
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	cf 91       	pop	r28
    3f2c:	df 91       	pop	r29
    3f2e:	1f 91       	pop	r17
    3f30:	0f 91       	pop	r16
    3f32:	08 95       	ret

00003f34 <PWM_voidStopChannel_1A>:

void PWM_voidStopChannel_1A(void)
{
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	cd b7       	in	r28, 0x3d	; 61
    3f3a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG, CS10);
    3f3c:	ae e4       	ldi	r26, 0x4E	; 78
    3f3e:	b0 e0       	ldi	r27, 0x00	; 0
    3f40:	ee e4       	ldi	r30, 0x4E	; 78
    3f42:	f0 e0       	ldi	r31, 0x00	; 0
    3f44:	80 81       	ld	r24, Z
    3f46:	8e 7f       	andi	r24, 0xFE	; 254
    3f48:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG, CS11);
    3f4a:	ae e4       	ldi	r26, 0x4E	; 78
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	ee e4       	ldi	r30, 0x4E	; 78
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	8d 7f       	andi	r24, 0xFD	; 253
    3f56:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG, CS12);
    3f58:	ae e4       	ldi	r26, 0x4E	; 78
    3f5a:	b0 e0       	ldi	r27, 0x00	; 0
    3f5c:	ee e4       	ldi	r30, 0x4E	; 78
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	80 81       	ld	r24, Z
    3f62:	8b 7f       	andi	r24, 0xFB	; 251
    3f64:	8c 93       	st	X, r24
}
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	08 95       	ret

00003f6c <SERVO_voidInit>:
#include "DIO_interface.h"
#include "PWM_interface.h"
#include "SERVO_interface.h"

void SERVO_voidInit(void)
{
    3f6c:	df 93       	push	r29
    3f6e:	cf 93       	push	r28
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    3f74:	83 e0       	ldi	r24, 0x03	; 3
    3f76:	65 e0       	ldi	r22, 0x05	; 5
    3f78:	41 e0       	ldi	r20, 0x01	; 1
    3f7a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <DIO_voidSetPinDirection>
	PWM_voidInitChannel_1A();
    3f7e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <PWM_voidInitChannel_1A>
}
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <SERVO_voidStart>:

void SERVO_voidStart(u8 copy_u8Angle)
{
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <SERVO_voidStart+0x6>
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8desired = (((copy_u8Angle + 90)/180)*5) + 5;
    3f94:	8a 81       	ldd	r24, Y+2	; 0x02
    3f96:	88 2f       	mov	r24, r24
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	86 5a       	subi	r24, 0xA6	; 166
    3f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9e:	24 eb       	ldi	r18, 0xB4	; 180
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	b9 01       	movw	r22, r18
    3fa4:	0e 94 1c 20 	call	0x4038	; 0x4038 <__divmodhi4>
    3fa8:	cb 01       	movw	r24, r22
    3faa:	9c 01       	movw	r18, r24
    3fac:	2f 5f       	subi	r18, 0xFF	; 255
    3fae:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb0:	c9 01       	movw	r24, r18
    3fb2:	88 0f       	add	r24, r24
    3fb4:	99 1f       	adc	r25, r25
    3fb6:	88 0f       	add	r24, r24
    3fb8:	99 1f       	adc	r25, r25
    3fba:	82 0f       	add	r24, r18
    3fbc:	93 1f       	adc	r25, r19
    3fbe:	89 83       	std	Y+1, r24	; 0x01
	PWM_voidGenerate_PWM_Channel_1A(copy_u32Frequancey_hz, local_u8desired);
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	88 2f       	mov	r24, r24
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	a0 e0       	ldi	r26, 0x00	; 0
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	bc 01       	movw	r22, r24
    3fcc:	cd 01       	movw	r24, r26
    3fce:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3fd2:	9b 01       	movw	r18, r22
    3fd4:	ac 01       	movw	r20, r24
    3fd6:	82 e3       	ldi	r24, 0x32	; 50
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	ba 01       	movw	r22, r20
    3fdc:	a9 01       	movw	r20, r18
    3fde:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <PWM_voidGenerate_PWM_Channel_1A>
}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	cf 91       	pop	r28
    3fe8:	df 91       	pop	r29
    3fea:	08 95       	ret

00003fec <SERVO_voidStop>:

void SERVO_voidStop(void)
{
    3fec:	df 93       	push	r29
    3fee:	cf 93       	push	r28
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
	PWM_voidStopChannel_1A();
    3ff4:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <PWM_voidStopChannel_1A>
}
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	08 95       	ret

00003ffe <main>:
#include "SERVO_interface.h"
#include "PROJECT_interface.h"
#include "util/delay.h"

void main (void)
{
    3ffe:	df 93       	push	r29
    4000:	cf 93       	push	r28
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
	PROJECT_voidInit();
    4006:	0e 94 bf 1c 	call	0x397e	; 0x397e <PROJECT_voidInit>
	PROJECT_voidStart();
    400a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <PROJECT_voidStart>
    400e:	ff cf       	rjmp	.-2      	; 0x400e <main+0x10>

00004010 <__udivmodhi4>:
    4010:	aa 1b       	sub	r26, r26
    4012:	bb 1b       	sub	r27, r27
    4014:	51 e1       	ldi	r21, 0x11	; 17
    4016:	07 c0       	rjmp	.+14     	; 0x4026 <__udivmodhi4_ep>

00004018 <__udivmodhi4_loop>:
    4018:	aa 1f       	adc	r26, r26
    401a:	bb 1f       	adc	r27, r27
    401c:	a6 17       	cp	r26, r22
    401e:	b7 07       	cpc	r27, r23
    4020:	10 f0       	brcs	.+4      	; 0x4026 <__udivmodhi4_ep>
    4022:	a6 1b       	sub	r26, r22
    4024:	b7 0b       	sbc	r27, r23

00004026 <__udivmodhi4_ep>:
    4026:	88 1f       	adc	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	5a 95       	dec	r21
    402c:	a9 f7       	brne	.-22     	; 0x4018 <__udivmodhi4_loop>
    402e:	80 95       	com	r24
    4030:	90 95       	com	r25
    4032:	bc 01       	movw	r22, r24
    4034:	cd 01       	movw	r24, r26
    4036:	08 95       	ret

00004038 <__divmodhi4>:
    4038:	97 fb       	bst	r25, 7
    403a:	09 2e       	mov	r0, r25
    403c:	07 26       	eor	r0, r23
    403e:	0a d0       	rcall	.+20     	; 0x4054 <__divmodhi4_neg1>
    4040:	77 fd       	sbrc	r23, 7
    4042:	04 d0       	rcall	.+8      	; 0x404c <__divmodhi4_neg2>
    4044:	e5 df       	rcall	.-54     	; 0x4010 <__udivmodhi4>
    4046:	06 d0       	rcall	.+12     	; 0x4054 <__divmodhi4_neg1>
    4048:	00 20       	and	r0, r0
    404a:	1a f4       	brpl	.+6      	; 0x4052 <__divmodhi4_exit>

0000404c <__divmodhi4_neg2>:
    404c:	70 95       	com	r23
    404e:	61 95       	neg	r22
    4050:	7f 4f       	sbci	r23, 0xFF	; 255

00004052 <__divmodhi4_exit>:
    4052:	08 95       	ret

00004054 <__divmodhi4_neg1>:
    4054:	f6 f7       	brtc	.-4      	; 0x4052 <__divmodhi4_exit>
    4056:	90 95       	com	r25
    4058:	81 95       	neg	r24
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	08 95       	ret

0000405e <__udivmodsi4>:
    405e:	a1 e2       	ldi	r26, 0x21	; 33
    4060:	1a 2e       	mov	r1, r26
    4062:	aa 1b       	sub	r26, r26
    4064:	bb 1b       	sub	r27, r27
    4066:	fd 01       	movw	r30, r26
    4068:	0d c0       	rjmp	.+26     	; 0x4084 <__udivmodsi4_ep>

0000406a <__udivmodsi4_loop>:
    406a:	aa 1f       	adc	r26, r26
    406c:	bb 1f       	adc	r27, r27
    406e:	ee 1f       	adc	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	a2 17       	cp	r26, r18
    4074:	b3 07       	cpc	r27, r19
    4076:	e4 07       	cpc	r30, r20
    4078:	f5 07       	cpc	r31, r21
    407a:	20 f0       	brcs	.+8      	; 0x4084 <__udivmodsi4_ep>
    407c:	a2 1b       	sub	r26, r18
    407e:	b3 0b       	sbc	r27, r19
    4080:	e4 0b       	sbc	r30, r20
    4082:	f5 0b       	sbc	r31, r21

00004084 <__udivmodsi4_ep>:
    4084:	66 1f       	adc	r22, r22
    4086:	77 1f       	adc	r23, r23
    4088:	88 1f       	adc	r24, r24
    408a:	99 1f       	adc	r25, r25
    408c:	1a 94       	dec	r1
    408e:	69 f7       	brne	.-38     	; 0x406a <__udivmodsi4_loop>
    4090:	60 95       	com	r22
    4092:	70 95       	com	r23
    4094:	80 95       	com	r24
    4096:	90 95       	com	r25
    4098:	9b 01       	movw	r18, r22
    409a:	ac 01       	movw	r20, r24
    409c:	bd 01       	movw	r22, r26
    409e:	cf 01       	movw	r24, r30
    40a0:	08 95       	ret

000040a2 <__prologue_saves__>:
    40a2:	2f 92       	push	r2
    40a4:	3f 92       	push	r3
    40a6:	4f 92       	push	r4
    40a8:	5f 92       	push	r5
    40aa:	6f 92       	push	r6
    40ac:	7f 92       	push	r7
    40ae:	8f 92       	push	r8
    40b0:	9f 92       	push	r9
    40b2:	af 92       	push	r10
    40b4:	bf 92       	push	r11
    40b6:	cf 92       	push	r12
    40b8:	df 92       	push	r13
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	ca 1b       	sub	r28, r26
    40cc:	db 0b       	sbc	r29, r27
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	09 94       	ijmp

000040da <__epilogue_restores__>:
    40da:	2a 88       	ldd	r2, Y+18	; 0x12
    40dc:	39 88       	ldd	r3, Y+17	; 0x11
    40de:	48 88       	ldd	r4, Y+16	; 0x10
    40e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    40e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    40e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    40e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    40e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    40ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    40ec:	b9 84       	ldd	r11, Y+9	; 0x09
    40ee:	c8 84       	ldd	r12, Y+8	; 0x08
    40f0:	df 80       	ldd	r13, Y+7	; 0x07
    40f2:	ee 80       	ldd	r14, Y+6	; 0x06
    40f4:	fd 80       	ldd	r15, Y+5	; 0x05
    40f6:	0c 81       	ldd	r16, Y+4	; 0x04
    40f8:	1b 81       	ldd	r17, Y+3	; 0x03
    40fa:	aa 81       	ldd	r26, Y+2	; 0x02
    40fc:	b9 81       	ldd	r27, Y+1	; 0x01
    40fe:	ce 0f       	add	r28, r30
    4100:	d1 1d       	adc	r29, r1
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	ed 01       	movw	r28, r26
    410e:	08 95       	ret

00004110 <_exit>:
    4110:	f8 94       	cli

00004112 <__stop_program>:
    4112:	ff cf       	rjmp	.-2      	; 0x4112 <__stop_program>
